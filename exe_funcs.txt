void start(void);
undefined4 f_8001008c_menu_maybe(undefined4 param_1,undefined4 param_2);
void f_80010114_ClearVram(short param_1,short param_2,short param_3,short param_4,u_char param_5,u_char param_6,u_char param_7);
uint f_80010158_GetCurrentTime(void);
uint f_80010164_rand(void);
uint f_8001018c_randrand(void);
void f_800101b4_srand(uint s);
uint f_800101e4_randseed(void);
char * f_800101f0_string_stuff(char *s1,char *param_2,int param_3);
void f_80010264_strutol(char *s1,char *s2);
void FUN_800102c0(char *param_1,char *param_2);
int f_8001031c_low_low(char *nnn,char *param_2);
void f_800103c4_set_music_vol(int vv);
void f_800103f8_set_music_vol_from_str(void);
int f_80010420_callback_for_c(byte *param_1,byte *p2,byte *p3);
int f_80010440_cb_for_10(uint *param_1,uint *param_2,uint *param_3);
void f_80010460_wrapped_draw_prims(int param_1);
undefined4 f_80010488_menuz(char *param_1,char *param_2,int param_3,undefined4 param_4);
void main(void);
void f_800110cc_resolve_os_ptr(void);
void f_800110f8_maybe_mod_reloc(uint *param_1,uint *ar);
void f_800111f0_fillz(uint *ptr,uint off);
void * f_8001123c_OSSymbolGetAddress(char *nnn);
int f_80011298_CRASH(void);
void * f_800112a0_OSSymbolGetAddressAssert(char *sy);
void f_800112d0_mod_related(int param_1,int *param_2);
void FUN_80011480(undefined4 param_1);
void f_800114dc_unks(void);
int f_80011554_cb_for_mod_load(byte *buff,int ty,int param_3,byte *juice,char *str);
RegDir * f_80011768_reg_find_by_ind_help2(RegDir *rg,int ind);
RegFile * f_800117b8_reg_get_file_by_ind(RegDir *rg,int ind);
int f_80011808_mr_loading_iter_file(RegDir *parent_dir,char *na,int ty,ushort val_s2,uint sz,uint comp_sz_maybe,byte *original_juice,int val_b0);
int f_80011b30_reg_remove_file(RegDir *rg,RegFile *fi,int s1);
int f_80011bd0_reg_dirs_loading(RegDir *reg_dir,RegDir **ret_dirs,byte *p3,byte b44);
int f_80011cf4_reg_unk9(RegDir *rg,int param_2);
int f_80011dc0_reg_sht(RegDir *rg,int bb);
byte * f_80011f0c_read_mr_file(RegDir *rd,byte *mr,uint some_ind);
RegDir * f_8001201c_reg_rec_search(RegDir *rg,RegDir *rg2);
RegDir * f_80012090_reg_file_is_child(RegDir *rg,RegFile *fff);
RegDir * f_800120d8_reg_find_dirs(RegDir *reg,char *nana);
RegDir * f_80012148_reg_messy1(RegDir *reg_dir,char *nam);
int FUN_80012288(RegDir *param_1,char *param_2,byte param_3);
RegFile * f_800123dc_reg_file_by_name(RegDir *rg,char *na);
RegDir * f_80012438_reg_get_file_data_helper1(RegDir *p_reg,char *kk,RegFile **out_f);
int f_800125d8_maybe_mod_related(RegDir *rg,char *na,byte *param_3,uint param_4,undefined4 param_5,undefined2 param_6,undefined4 param_7);
undefined4 f_800127a4_regz_regz(RegDir *rg1,RegDir *rg2,uchar *param_3);
int f_800128cc_reg_alloc_or_find_dunno(char *nam);
int f_80012974_reg_free_uk1(char *na);
void f_800129c8_reg_clearz(void);
int f_80012a24_reg_some_arr_ind(char *nam);
char * f_80012aa0_get_from_arr(int ii);
void f_80012ad0_create_root_and_stuff(void);
void FUN_80012b98(void);
int f_80012bf0_RegAddReg(char *path,byte *mr_data,char *sub);
undefined4 FUN_80012c80(RegDir *param_1,short *param_2,char *param_3);
void f_80012cf8_RegRemoveReg(char *param_1);
void f_80012d68_reg_set_loader_callback(int ty,void *func);
int FUN_80012d80(char *param_1);
RegDir * f_80012e00_RegGetCurrentDirectoryPtr(void);
char * f_80012e0c_RegGetCurrentDirectoryName(void);
uint f_80012e18_RegChangeCurrentDirectoryS(char *nam);
int f_80012e58_RegChangeCurrentDirectoryP(RegDir *rg);
uint f_80012e74_RegChangeCurrentDirectoryPS(RegDir *param_1,char *param_2);
undefined4 FUN_80012eac(char *param_1,int param_2);
int f_80012f04_RegChangeCurrentDirectoryPN(RegDir *rg,int index);
undefined4 FUN_80012f40(RegDir *param_1,char *param_2,int param_3);
int f_80012f8c_RegGetNumberOfDirectoriesS(char *nam);
uint f_80012fc8_RegGetNumberOfDirectoriesP(RegDir *rg);
uint FUN_80012fe4(RegDir *param_1,char *param_2);
uint FUN_80013018(char *param_1,int param_2);
uint FUN_80013070(RegDir *param_1,int param_2);
uint FUN_800130ac(RegDir *param_1,char *param_2,int param_3);
char * f_800130f8_RegGetDirectoryNameP(RegDir *rg);
char * f_80013110_RegGetDirectoryNameSN(char *dir_na,int ind);
char * f_8001315c_RegGetDirectoryNamePN(RegDir *rg,int ind);
char * FUN_8001318c(RegDir *param_1,char *param_2,int param_3);
RegDir * f_800131cc_RegGetDirectoryPtrS(char *na);
RegDir * f_800131f4_RegGetDirectoryPtrPS(RegDir *r1,char *nn);
RegDir * f_80013214_re_help5(char *nam,int param_2);
RegDir * f_8001325c_RegGetDirectoryPtrPN(RegDir *rg,int ii);
RegDir * f_80013288_RegGetDirectoryPtrPSN(RegDir *rg,char *nana,int ppp);
void FUN_800132c4(undefined4 param_1,char *param_2);
undefined4 FUN_800132fc(int param_1,undefined4 param_2,char *param_3);
int FUN_80013350(char *param_1,char *param_2);
int FUN_800133a8(RegDir *param_1,char *param_2);
int FUN_800133ec(RegDir *param_1,char *param_2,char *param_3);
int FUN_80013438(char *param_1,int param_2,char *param_3);
int FUN_800134b0(RegDir *param_1,int param_2,char *param_3);
int FUN_80013510(RegDir *param_1,char *param_2,int param_3,char *param_4);
uint f_800135b8_RegGetNumberOfFilesP(RegDir *rg);
uint FUN_800135d4(RegDir *param_1,char *param_2);
uint FUN_80013608(char *param_1,int param_2);
uint FUN_80013660(RegDir *param_1,int param_2);
uint FUN_8001369c(RegDir *param_1,char *param_2,int param_3);
char * FUN_80013700(char *param_1,int param_2);
char * f_8001374c_RegGetFileNamePN(RegDir *rrr,int ind);
char * FUN_8001377c(RegDir *param_1,char *param_2,int param_3);
int FUN_800137bc(char *param_1);
byte * f_800137fc_RegGetFilePtrPS(RegDir *rg,char *na);
RegFile * FUN_80013834(char *param_1,int param_2);
RegFile * FUN_8001387c(RegDir *param_1,int param_2);
RegFile * FUN_800138a8(RegDir *param_1,char *param_2,int param_3);
uint FUN_800138e4(char *param_1);
int f_8001392c_RegGetFileTypeP(RegFile *fff);
int f_80013948_RegGetFileTypePS(RegDir *rg,char *na);
uint FUN_80013988(char *param_1,int param_2);
uint FUN_800139e0(RegDir *param_1,int param_2);
uint FUN_80013a1c(RegDir *param_1,char *param_2,int param_3);
int f_80013a68_RegGetFileArraySizeS(char *param_1);
int f_80013ac0_RegGetFileArraySizeP(RegFile *fff);
int f_80013ae8_RegGetFileArraySizePS(RegDir *rg,char *na);
int FUN_80013b38(char *param_1,int param_2);
int FUN_80013b9c(RegDir *param_1,int param_2);
int FUN_80013be4(RegDir *param_1,char *param_2,int param_3);
byte * f_80013c3c_RegGetFileDataS(char *ss);
byte * f_80013cd8_RegGetFileDataP(RegFile *fff);
byte * f_80013d54_RegGetFileDataPS(RegDir *rg,char *nam);
char * FUN_80013de8(char *param_1,int param_2);
byte * f_80013e8c_RegGetFileDataPN(RegDir *rg,int ind);
char * FUN_80013f18(RegDir *param_1,char *param_2,int param_3);
void FUN_80013fb0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,char *param_5);
int f_80014020_reg_unk2(RegDir *rg,undefined4 param_2,uint *unk,undefined4 param_4,int param_5,char *na);
void FUN_800140a4(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined2 param_4,undefined4 param_5,char *param_6);
int FUN_8001411c(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined2 param_5,undefined4 param_6,char *param_7);
int f_800141a0_reg_unks5(char *nnn);
int f_800141ec_reg_file_rem_unk(RegFile *fff);
int f_8001423c_reg_rems(RegDir *rgrg,char *nnn);
int FUN_80014288(char *param_1,int param_2);
int f_800142f4_reg_help99(RegDir *rg);
int FUN_80014340(RegDir *rg,char *param_2,int param_3);
int f_800143a0_reg_file_checks1(RegFile *rg);
int f_8001441c_maybe_uncompress(byte *juice,uint *param_2,uint param_3,uint param_4);
undefined4 FUN_800144d0(int param_1);
undefined4 FUN_80014544(int param_1);
uint f_800145c8_maybe_compr_rel(int param_1,uint param_2,char *param_3,int param_4);
void f_80014720_dunno_maybe_com(int param_1,char *ver,int param_3);
int FUN_8001474c(byte **param_1,int param_2);
undefined4 FUN_80014cf0(int param_1,int param_2,uint param_3);
undefined4 FUN_80014dc8(char **param_1);
undefined4 FUN_80014efc(int param_1);
void FUN_80014f78(undefined4 param_1,int param_2,int param_3);
void FUN_80014f9c(undefined4 param_1,void *param_2);
void FUN_80014fbc(int *param_1,int param_2,int *param_3);
undefined4 * FUN_8001507c(int param_1,undefined4 param_2,int param_3);
void FUN_80015178(undefined4 *param_1,byte **param_2,int param_3);
undefined4 FUN_80015d94(int param_1,int param_2);
void FUN_80015e10(int param_1,byte *param_2,uint param_3);
bool FUN_80015e58(int *param_1);
void FUN_80015e6c(undefined param_1,undefined param_2,undefined4 param_3,undefined4 param_4,int param_5);
void FUN_80015ee4(int param_1,byte **param_2,int param_3);
void FUN_80016718(undefined4 param_1,int param_2);
undefined4 FUN_80016744(int param_1,int param_2,int param_3,int param_4,int param_5,byte **param_6);
undefined4 FUN_80016ba8(int *param_1,uint param_2,uint param_3,int param_4,int param_5,int *param_6,uint *param_7,int param_8,int *param_9,uint *param_10);
int FUN_80017174(undefined4 param_1,int *param_2,undefined4 param_3,undefined4 param_4,int param_5);
int FUN_80017280(uint param_1,undefined4 param_2,int param_3,int *param_4,int *param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,int param_9);
undefined4 FUN_80017484(undefined4 *param_1,undefined4 *param_2,undefined4 *param_3,undefined4 *param_4);
int FUN_800174bc(int param_1,int param_2,int param_3);
uint FUN_8001765c(uint param_1,byte *param_2,uint param_3);
void f_8001783c_unk_iter_mem(uint *pp);
byte * f_8001786c_unk_inits(void);
void f_800178a0_maybe_allocator_setup(byte *some_ptr);
void f_800178c8_maybe_mem_init(void *aaa,uint sz);
void FUN_8001790c(void);
void * f_80017944_mem_alloc_u1(uint sz,int unk_mo);
void * f_80017cd8_MemAlloc(uint sz);
void * f_80017cf8_alloc_wrap5(uint sz);
int f_80017d18_mem_mrg(MemBlk *mb,MemBlk *qq);
void f_80017d60_MemFree(void *ptr);
int f_80017e40_reg_check_help2(RegFile *rg);
void f_80017e5c_mem_copy(byte *dest,byte *src,uint sz);
void * f_80017f90_MemRealloc(void *mem,uint sz);
void f_80017ff4_MemSet(void *param_1,uint param_2,uint param_3);
void * f_80018078_MemCalloc(int sz,int nn);
void f_800180c8_obj_head_insert_into_list(Obj *oo,Obj **out,Obj *o5);
void f_800180f8_obj_linkage_he2(Obj *oo,Obj **o2);
int f_80018154_obj_type_index(char *nam);
void * f_800181c0_interaction_func_for_types(char *t1,char *t2);
int f_8001823c_obj_info_reg(char *name,int sz,RegDir *rg,void *func_ctor,void *func_inst_ctor,void *func_proc,void *func_disp,void *fn_destr);
int f_80018428_obj_interaction_tab_he1(char *nam,char *nam2,void *func_mb);
int f_800184f8_obj_exists_in_list(Obj *needle,Obj *hay);
int f_80018528_ObjectValidObject(void *obj_juice);
void f_8001858c_obj_unlink_from_square(Obj *obj_head,SquareData *sq);
void f_80018698_obj_link_to_square(Obj *obj_head,SquareData *ss);
void f_800186fc_obj_try_unlink(Obj *obj);
void f_8001873c_obj_head_link_with_world(Obj *obj_head);
void f_8001877c_obj_destroy_core(Obj *oo,int mo);
void f_80018ac0_ObjectSetOwner(void *obj,void *ooo);
void f_80018af4_ObjectSetPosition(void *oo_juice,int xx,int yy,int zz);
void * f_80018ba4_ObjectCreate(char *name,u_char flagz,...);
int f_800191bc_obj_ext_he2(Obj *extender,int *o2);
void f_80019278_int_ext_free(Obj *ob_juice);
void f_800192cc_obj_ut9(Obj *obj_juice);
void f_8001933c_extender_he2(Obj *param_1);
void f_8001935c_ObjectSetInteractionRadius(void *obj_juice,int rad);
void f_80019700_obj_list_destroy(ObjListDef *lst);
void f_800197d4_obj_recurse_he1(char *na,RegDir *rg,PFN_DIR_OBJ_DIR *func,...);
int f_80019940_ObjectDirectoryRecurse(PFN_DIR_OBJ_DIR *func);
int f_800199d0_cb_register_obj_type(char *nam,RegDir *rg);
int f_80019bd0_cb_obj_all_class_ctor_dtor(char *nam,RegDir *rg,char *nn2);
int f_80019c94_ctors_unk1(char *na,RegDir *rg);
int f_80019cb8_cb_dtors(char *nn,RegDir *rg);
int f_80019cdc_reg_startup_instances(char *oo,RegDir *rg);
void f_80019e68_ObjectDestructor(void);
int f_80019f3c_recurse_startup(uint *param_1);
void f_80019f60_ObjectConstructor(void);
int f_8001a11c_ObjectInteractObjectHeaderWithObjectHeader(Obj *aa,Obj *bb);
int f_8001a21c_obj_inter_help4(Obj *aa,int *param_2);
void f_8001a254_alloc_unk8(Obj *obj_h,uint *output);
void f_8001a2a8_ObjProcHelp1_Interactions(void);
int f_8001a50c_ObjectOffGrid(void *obj_juice);
void f_8001a538_ObjectDestroy(void *obj_juice);
void f_8001a56c_ObjProcHelp2_ProcObjLists(ObjListDef *ppp);
void f_8001a610_ObjectProcess(void);
void f_8001a678_ObjectInteractionListConstructor(InterList *ii);
void f_8001a680_ObjectInteractionListDestructor(InterList *ii);
uint f_8001a6d4_ObjectInteractionListProcess(InterList *ii);
int f_8001a750_ObjectInteractionListInteractWithObjectFirstTime(InterList *ii,void *obj_juice);
void f_8001a7fc_vsync_cb(void);
void f_8001a82c_draw_sy_cb(void);
void f_8001a840_VB_StartSync(void);
void f_8001a87c_VB_StopSync(void);
void FUN_8001a8a8(void);
PACKET * GsGetWorkBase(void);
uint * f_8001a8f0_wo_render_low2(uint *param_1,int param_2,uint *param_3,uint *param_4);
uint * f_8001b0a0_wo_render_low1(undefined4 *param_1,int param_2,uint *param_3,uint *param_4);
SquareData * f_8001b67c_world_square_at_xz(int xx,int zz);
uint f_8001b6e0_WorldGetLight(int xx,int zz);
int f_8001b748_WorldGetFaceVertexIndices(DispFaceHead *face,byte *r0,byte *r1,byte *r2,byte *r3);
int f_8001b7ec_WorldGetFaceCenterPoint(DispFaceHead *face,SVECTOR *verts,SVECTOR *re);
void FUN_8001b924(void);
WorldObjInfo * f_8001b92c_WorldObjectGetInfo(RegDir *rg);
int f_8001b950_wo_setup1(RegDir *rg,WorldObjInfo *wo);
int f_8001baa4_wo_setup0(RegDir *rg,WorldObjInfo *wo);
int f_8001bb6c_wo_vis_setups(RegDir *rg,WorldObjInfo *wo);
int f_8001bbf0_wo_col_setups1(RegDir *rg,WorldObjInfo *wo);
int f_8001bd0c_wo_col_setups0(RegDir *rg,WorldObjInfo *wo);
int f_8001bdf8_wo_collision_setups(RegDir *rg,WorldObjInfo *wo);
int f_8001be78_cb_world_obj(undefined4 param_1,RegDir *rg);
uint f_8001befc_WorldObjectDisplayFacesExist(WorldObjInfo *wo);
int f_8001bf10_wo_he9(WorldObjInfo *wo,int param_2);
ulonglong FUN_8001bfd4(uint *param_1,undefined4 *param_2);
undefined4 FUN_8001c0a8(int *param_1,short param_2,short param_3,short param_4);
int f_8001c12c_wo_unk1(WorldObjInfo *wo,int mm,void *fu);
int f_8001c208_wo_unk3(WorldObjInfo *wo,int mm,void *func);
int f_8001c338_WorldObjectDisplayFacesApplyFaceFunction(WorldObjInfo *wo,uint mm,void *fnc);
int f_8001c390_world_obj_calc_box1(WorldObjInfo *wo,SVECTOR *mi,SVECTOR *ma);
int f_8001c4c8_world_obj_calc_box0(WorldObjInfo *wo,SVECTOR *mi,SVECTOR *ma);
int f_8001c600_world_obj_box(WorldObjInfo *wo,SVECTOR *mi,SVECTOR *ma);
int f_8001c648_world_obj_calc_sqr(WorldObjInfo *wo,SVECTOR *cnt);
int f_8001c744_world_obj_calcs_sqr44(WorldObjInfo *wo,SVECTOR *cnt);
int f_8001c84c_world_obj_dunno2(WorldObjInfo *wo,SVECTOR *sv);
int f_8001c894_WorldObjectDisplayFacesGetCenterPoint(WorldObjInfo *wo,SVECTOR *ou);
int f_8001c948_wo_help2(WorldObjInfo *param_1,SVECTOR *dunno_exists);
int f_8001c968_WorldObjectDisplay(WorldObjInfo *wo,void *p_ot,uint **output,uint *unku,MATRIX *mtx);
int f_8001d358_wo_help10(WorldObjInfo *wo,int val);
int f_8001d3bc_WorldObjectCollisionPolysSetOwner(WorldObjInfo *wo,void *ppp);
ulonglong f_8001d420_wo_calcs_loop(WorldObjInfo *wo,uint *unk);
undefined4 FUN_8001d558(int param_1,short param_2,short param_3,short param_4);
undefined4 FUN_8001d608_box_again(int param_1,short *param_2,short *param_3);
undefined4 FUN_8001d730(int param_1,short *param_2,short *param_3);
undefined4 FUN_8001d858(int param_1);
long FUN_8001d8a0(int param_1,short *param_2);
long FUN_8001d998(int param_1,short *param_2);
undefined4 FUN_8001da90(int param_1);
undefined4 FUN_8001dad8(undefined4 param_1,SVECTOR *sv);
void FUN_8001db8c(undefined4 param_1);
int f_8001dbac_WorldObjectSet(WorldObjInfo *wo,int vv);
int f_8001dc1c_wo_unks(WorldObjInfo *wo,uint *param_2);
undefined4 FUN_8001dc8c(int *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
int f_8001dd1c_WorldObjectGetBoundingBox(WorldObjInfo *wo,SVECTOR *mi,SVECTOR *ma);
void FUN_8001dd3c(WorldObjInfo *param_1,SVECTOR *param_2);
int f_8001dd5c_WorldObjectGetCenterRadius(WorldObjInfo *wo,SVECTOR *dunno_exists);
int f_8001dd7c_WorldObjectGetCenterPoint(WorldObjInfo *wo,SVECTOR *re);
void f_8001dd9c_dunno(void);
void f_8001de74_world_setups(RegDir *rg);
void FUN_8001e51c(short param_1,short param_2);
int f_8001e540_GetHeight3d(short xx,short yy,short zz);
int f_8001e5a4_IntersectWorldWithRay(SVECTOR *sv1,SVECTOR *sv2,uint u3,RayHitRes *output);
int f_8001e990_draw_ingame_stuff(int param_1,int param_2,int param_3,int param_4,int param_5,int param_6);
void FUN_8001f458(int param_1);
void FUN_8001f598(void);
void FUN_8001f880(void);
void FUN_8001f9bc(void);
void * f_8001fa40_maybe_clear(void);
int * FUN_8001fb1c(void);
void f_8001fb28_render_related(void);
void f_8001fe04_draw_prims(int param_1);
void f_8001ffe8_handle_horiz(byte *horiz_bin);
void f_80020078_horiz_unk(byte *param_1,byte *param_2,byte *param_3);
void f_80020104_draw_bg(uint *param_1,int param_2,uint param_3);
void f_800204a0_pads(void);
void FUN_800204d8(void);
void FUN_800204f8(void);
void FUN_80020518(void);
void f_80020594_dual_shock_sht(void);
void FUN_800205b8(void);
void FUN_800205c0(void);
void f_8002061c_some_struct_setups(void);
void FUN_80020670(int param_1,int param_2);
void FUN_800206d0(int param_1,int param_2,int param_3,int param_4);
int FUN_800207ac(uint param_1,int param_2,int param_3,int param_4);
byte * f_80020b44_PadGetPad(int u0);
void FUN_80020cbc(int param_1,undefined param_2);
void FUN_80020d0c(int param_1,char *param_2);
void f_80020dd8_vibrate_stuff(undefined4 param_1,char *param_2);
void FUN_80020e1c(undefined4 param_1,char *param_2,int param_3);
void f_80020e80_CDSetCurrentDirectory(char *param_1);
undefined4 FUN_80020f4c(void);
undefined4 FUN_80020fe8(void);
bool FUN_80021094(undefined4 param_1,undefined4 param_2);
bool FUN_80021118(undefined4 param_1);
undefined4 FUN_8002113c(undefined4 param_1);
undefined4 FUN_8002116c(undefined4 param_1,undefined4 *param_2);
undefined4 FUN_800211b8(undefined4 param_1,undefined4 *param_2);
void f_80021204_cd_inits(void);
void FUN_80021264(void);
void FUN_800212b4(void);
void FUN_80021304(void);
bool FUN_8002134c(undefined4 param_1,void **param_2);
undefined4 FUN_800213dc(undefined4 param_1,undefined4 param_2,undefined4 param_3,void **param_4);
void FUN_80021518(void);
void FUN_8002153c(u_char param_1,undefined param_2,undefined param_3,undefined param_4,int param_5,undefined4 param_6,u_long *param_7,code *param_8);
void * FUN_80021690(undefined param_1,undefined param_2,undefined param_3,undefined param_4,int param_5,undefined4 param_6,undefined4 param_7);
void FUN_80021738(undefined4 param_1,undefined4 param_2,undefined4 param_3);
void FUN_800217a0(undefined *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
byte * f_800217e8_CDLoadFile(char *na,int unk2);
undefined4 FUN_8002184c(undefined4 param_1,undefined4 param_2);
undefined4 FUN_800218b0(void);
undefined4 FUN_80021964(undefined4 param_1,undefined4 param_2);
undefined4 FUN_800219c8(undefined param_1,undefined param_2,undefined param_3,undefined param_4,int param_5,undefined4 param_6,void **param_7);
undefined4 FUN_80021a88(u_char *param_1);
undefined4 FUN_80021acc(undefined4 *param_1,int *param_2,undefined4 param_3,undefined4 param_4);
void FUN_80021b88(int param_1,int param_2,u_long *param_3);
void FUN_80021bec(uint *param_1,uint *param_2);
bool FUN_80021cc8(char *param_1,char *param_2);
uint FUN_80021cf0(int *param_1,uint *param_2,undefined4 param_3,code *param_4);
undefined4 FUN_80021fc8(undefined4 param_1,undefined4 param_2,undefined4 *param_3);
undefined4 FUN_80022020(int *param_1,undefined4 *param_2,char *param_3);
undefined4 FUN_80022210(char *param_1,CdlLOC *param_2);
void FUN_800223b8(void);
int FUN_800223fc(uchar *param_1,ulong param_2);
int FUN_800225cc(char *param_1);
undefined4 FUN_800226a0(int param_1,undefined param_2,undefined param_3,undefined param_4,undefined param_5,undefined param_6,byte param_7,undefined param_8,undefined2 param_9,undefined2 param_10);
void FUN_80022834(void);
int f_80022900_SoundGetProgramId(char *na);
int f_80022978_SoundProgramIdGetNumVagAttrs(int prog_id);
int f_800229b0_SoundProgramIdGetVagAttr(int prog_id,int ind,uint *todo_struct);
undefined4 FUN_80022b54(int param_1);
undefined4 FUN_80022bfc(char *param_1);
void f_80022c34_snd_related(int param_1,int param_2,int param_3,uint voice,ushort param_5,int param_6,int param_7);
void f_80022d90_snd_stuff1(int param_1,int param_2,int *param_3,int *param_4);
void FUN_80022de4(char *param_1);
void f_80022ee8_snd_vol_stuff(int param_1,int param_2,int param_3);
void f_80022f3c_SoundStopSounds(void);
void f_sound_80022fbc_SoundStopSound(uint v);
void FUN_80023050(void);
void FUN_80023078(undefined4 param_1);
void f_80023084_SoundSetMusicVolume(int param_1);
undefined2 f_800230bc_SoundNoteToPitch(undefined2 param_1,undefined2 param_2,undefined2 param_3,undefined2 param_4);
void f_800230e8_cb10_util_sound_related(int *param_1);
void f_800233f8_cb10_wrap(int *param_1,int *param_2);
void f_8002341c_spu_inits(void);
int f_800234ac_snd_ratan_calcs(int param_1,int param_2,long param_3,uint param_4,int *param_5,int *param_6);
int f_800235f4_SoundPlaying(void *obj_juice,char *nnn);
int f_80023678_snd_help_maths_dots33(VECTOR *vv,VECTOR *vc,SVECTOR *sv3,SVECTOR *sv4,int fac);
void f_800237c0_SoundProcess(void);
void FUN_80024024(void);
void FUN_800240b8(void);
void FUN_80024148(void);
void FUN_8002418c(void);
undefined4 FUN_80024204(int param_1);
void FUN_80024284(char param_1,int param_2);
undefined4 FUN_80024478(undefined4 param_1,undefined4 param_2);
void FUN_80024510(int param_1,code *param_2,int param_3,undefined4 param_4);
void FUN_8002475c(u_char param_1);
void FUN_800247b8(void);
void FUN_800247e4(void);
void FUN_8002480c(int param_1,undefined4 param_2);
int f_800248c4_poly_ray_ut1(ColFace *cf,RayDef *seg);
int f_80024ab4_DotS12_64(Vec3 *v1,SVECTOR *sv);
int f_80024bc4_SquareRootInt32(int v);
int f_80024ca8_sqr_vc(VECTOR *ve);
int f_80024d2c_VectorLength64(Vec3 *vv);
int f_80024d88_VectorLength0(VECTOR *vv);
int f_80024de8_gte_stuff(SVECTOR *sv);
int FUN_80024e60(undefined4 *param_1);
void f_80024f38_SquareSL0_bugfree(SVECTOR *ss,VECTOR *vv);
Vec3 * f_80024fa0_gte_rot_mtx_unk(SVECTOR *sv,Vec3 *ov);
SVECTOR * f_80025024_box_help5_vecs(SVECTOR *inin,SVECTOR *output);
int f_80025058_DotSS0(SVECTOR *param_1,SVECTOR *param_2);
int f_80025088_DotSS12(SVECTOR *sv0,SVECTOR *sv1);
int f_800250b8_DotSelf0(VECTOR *vv);
void f_800250e8_OuterProductSSS12(SVECTOR *a0,SVECTOR *a1,SVECTOR *a2);
void f_800251e8_box_ctor_gte_stuff(SVECTOR *dunno,SVECTOR *dunno2,SVECTOR *re);
VECTOR * f_80025238_SetVectorDaxpyVS0(VECTOR *dst,int val,SVECTOR *sv);
VECTOR * f_80025274_SetVectorDaxpyVS12(VECTOR *dst,int val,SVECTOR *sv);
void f_800252b0_SetVectorDaxpySS12(SVECTOR *vvv,int aaa,SVECTOR *sss);
VECTOR * f_80025340_AddVectorDaxpyVSV12(VECTOR *vv,int ss,SVECTOR *sv1,VECTOR *vs);
SVECTOR * f_80025388_AddVectorDaxpySSS12(SVECTOR *out,int a1,SVECTOR *sv3,SVECTOR *sv4);
undefined4 * FUN_800253e8(undefined4 *param_1,undefined4 param_2,short *param_3,short *param_4);
SVECTOR * f_8002543c_ApplyRotMatrixSV(undefined4 *not_sure,SVECTOR *dst);
SVECTOR * f_80025470_ApplyMatrixWithTranslationSV(MATRIX *mtx,SVECTOR *vv,SVECTOR *ss);
void f_8002554c_IdentifyMatrix(MATRIX *mtx);
void f_80025708_RotationMatrixX(int ang,MATRIX *mtx);
void f_80025770_RotationMatrixY(int ang,MATRIX *param_2);
MATRIX * f_800257d4_RotationMatrixZ(int ang,MATRIX *mtx);
int f_8002592c_IntersectPolygonWithRay(ColFace *cf,RayDef *seg,uint unk_mo,Vec3 *cp);
void f_80025ac0_BoxConstructor(DaBox *dst,SVECTOR *mi,SVECTOR *ma);
void f_80025f20_BoxDestructor(DaBox *box);
int f_80025f50_box_intersect_help2(DaBox *b1,MATRIX *m1,DaBox *b2,MATRIX *m2);
int f_800263bc_boxes_help10(byte *param_1,int num,uint *ptr);
int f_800268c0_boxes_help1(DaBox *b1,MATRIX *mtx1,DaBox *b2,MATRIX *mtx2,SVECTOR *ooo);
int f_80026bc0_box_box2_unk_wra(void);
int f_80026bf4_IntersectBoxWithBox(DaBox *b1,MATRIX *m1,DaBox *b2,MATRIX *m2,SVECTOR *param_5);
int f_80026cb4_IntersectBoxWithSegment(DaBox *box,MATRIX *mtx,SVECTOR *sg0,SVECTOR *sg1,SVECTOR *ddd);
int f_80026ff0_IntersectBoxWithSphere(DaBox *box,MATRIX *mtx_box,SVECTOR *sph_pos,int radius);
int f_80027160_VectorNormalSNew64(Vec3 *vc,SVECTOR *sv);
int f_800271cc_vecz(VECTOR *v1,SVECTOR *sv);
void f_80027238_AddVectorDaxpySS(SVec3 *dst,SVec3 *vv,int val,int qq);
void f_800272e8_AddVectorDaxpySV(SVec3 *dst,Vec3 *vvv,int val,int qq);
void f_80027398_AddVectorDaxpyVS(Vec3 *dst,SVECTOR *sv,int val3,int val4);
void f_80027448_AddVectorDaxpyVV(VECTOR *v1,VECTOR *v2,int q1,int q2);
void f_800274f8_SetVectorDaxpySS(SVECTOR *dst,SVECTOR *param_2,int uuu3,int uuu4);
void f_80027590_unk_svec_lo(SVECTOR *dst,Vec3 *vc,int qqq,int mag);
void f_80027628_SetVectorDaxpyVS(VECTOR *dst,SVECTOR *sv,int val1,int val2);
void f_800276c0_SetVectorDaxpyVV(Vec3 *v1,Vec3 *v2,int u1,int u2);
void FUN_80027820(int *param_1,short *param_2,short *param_3,int param_4);
uint f_800278e8_arccos(int v);
void f_80027938_unkz(short *param_1,short *param_2,SVECTOR *dst);
void f_80027ab0_slerp_he1(SVECTOR *param_1,SVECTOR *param_2,int val,SVECTOR *oo);
void f_80027d88_axis_angle_to_mtx_he1(SVECTOR *vec,int angle,MATRIX *mtx);
void f_80027e04_gte_stuff(SVECTOR *vcvc,MATRIX *mtx);
void f_80027f0c_slerp_unkunk(short *param_1,uint *param_2);
void f_80028204_QuaternionSlerpToRotMatrix(SVECTOR *v1,SVECTOR *v2,undefined4 param_3,MATRIX *param_4);
void FUN_80028238(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_8002829c(SVECTOR *param_1,int param_2,undefined4 param_3,int param_4);
void f_800282f8_AxisAngleToRotMatrix(SVECTOR *vc,int angle,MATRIX *mtx);
void f_8002832c_AnyAxisAngleToRotMatrix(SVECTOR *pt,SVECTOR *vec,int angle,MATRIX *mtx);
void FUN_800283b4(SVECTOR *param_1,Vec3 *param_2,MATRIX *param_3);
void f_80028400_PointsAngleToRotMatrix(SVECTOR *p0,SVECTOR *p1,int angle,MATRIX *mtx);
void f_80028498_NormalizeMatrixWithBasis(MATRIX *mtx,int a1,int a2);
void f_8002862c_NormalizeMatrix(MATRIX *mtx);
MATRIX * f_80028688_InverseMatrix(MATRIX *m0,MATRIX *m1);
undefined4 FUN_800286f0(int *param_1,int *param_2,int *param_3,int *param_4,int *param_5,int *param_6,int *param_7);
int FUN_8002889c(void);
int FUN_80028920(Vec3 *param_1,SVECTOR *param_2,VECTOR *param_3);
int f_8002896c_math_ortho_help1(SVECTOR *sv,SVECTOR *sv2,SVECTOR *sv3);
void f_800289d8_ProjOrthogonalS(int *param_1,undefined4 param_2,VECTOR *qqq);
void f_80028a40_ProjOrthogonalSS(SVECTOR *iii,int a1,SVECTOR *dst);
int f_80028ab8_mul64s(int aa,int bb,int q);
int f_80028b58_DistanceApprox2d(int xx,int zz);
int f_80028b98_DistanceApprox3d(int xx,int yy,int zz);
int f_80028c1c_point_in_poly_he(SVECTOR *seg0,SVECTOR *seg1,SVECTOR *point,int mm);
int f_80028cdc_PointInPolygon2d(VECTOR *pp,Poly2D_unk_size *p2);
int f_80028e04_RayThruBox(SVECTOR *origin,VECTOR *dir,SVECTOR *box_min,SVECTOR *box_max,int *outz);
int FUN_80029094(int param_1,int param_2);
void FUN_800290c8(uint *param_1,uint *param_2,uint *param_3,uint param_4);
void FUN_80029100(int *param_1,int *param_2,int *param_3,int param_4,int param_5,uint param_6);
uint FUN_80029158(uint *param_1,uint *param_2,uint param_3);
void FUN_8002923c(int *param_1,undefined4 param_2,int param_3);
void f_800292ac_box_fillz_unk(DaBoxShite *dst,int num1,int num2,int *ptr_big1,int *ptr_big2);
void FUN_80029318(int param_1,int param_2,int param_3,int param_4,undefined4 param_5,undefined4 param_6);
byte * f_800293f4_alloc_unk(int param_1,int param_2,int param_3);
void f_800294ec_box_destr_help(uint *uuu);
void FUN_8002952c(int param_1,int param_2,int param_3,int param_4,int *param_5,int *param_6,uint param_7,uint param_8,byte *param_9,byte *param_10,uint param_11,int param_12);
undefined4 FUN_80029754(uint *param_1,uint *param_2,uint *param_3,uint param_4,uint param_5);
uint FUN_8002a180(uint *param_1,uint param_2,int param_3,byte *param_4);
byte * f_8002a5a4_big(uint *param_1,uint *param_2,int param_3,int param_4);
void f_8002ba9c_box_help4(int *param_1);
void * f_8002bbd4_box_help2(short *unknown_struct);
uint * FUN_8002bccc(uint *param_1,int param_2,uint *param_3,uint param_4);
void FUN_8002be68(byte *param_1,int param_2,int param_3);
undefined4 FUN_8002bfd4(int param_1,int param_2);
uint ** FUN_8002c0c0(uint **param_1,uint **param_2);
int f_8002c1c4_box_help99(int *box_allocated_stuff,int *ptr);
int f_8002c278_box_help77(int *unk,short *dunno);
int f_8002c32c_box_help88(int *param_1,byte *param_2,short *param_3,int *param_4);
void f_8002ccf0_VectorNormalS(VECTOR *vc1,SVECTOR *output);
void f_8002cd04_VectorNormal(VECTOR *aa,VECTOR *bb);
void f_8002cd30_VectorNormalSS(SVECTOR *ss1,SVECTOR *ss2);
void f_8002cd5c_math_gte_stuff_args_in_t(void *t0,void *t1,void *t2);
void FUN_8002ce0c(void);
void FUN_8002ce30(void);
void FUN_8002ce54(void);
void FUN_8002ceb8(void);
void FUN_8002cf0c(void);
void FUN_8002cf50(void);
void FUN_8002cfd4(void);
void FUN_8002cff8(void);
void FUN_8002d02c(int param_1);
undefined4 f_8002d2a0_menu_big_sht(void **param_1,int ind,int param_3);
void FUN_8002ede8(void);
void FUN_8002ee2c(void);
void FUN_8002ee50(void);
void FUN_8002ee74(void);
void FUN_8002eed8(void);
void FUN_8002ef2c(void);
void FUN_8002efb0(void);
void FUN_8002efd4(void);
void FUN_8002f008(void);
void FUN_8002f04c(void);
void FUN_8002f070(byte *param_1,byte *param_2,int param_3,char *param_4);
void FUN_8002f0f4(int param_1);
void f_8002f7f8_unk_at_main(int index);
void f_8002f8f0_ScreenLocalMessageRegisterV(int ind,undefined4 param_2,undefined4 param_3);
void f_8002f9ec_hud_msg(int param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void FUN_8002fa1c(int param_1,int param_2,uint *param_3);
uint f_8002fdf8_font_u2(char *unk_na,undefined4 param_2,undefined param_3);
void f_8002fe64_setups_pointers(void);
void f_800301a8_unk(void);
void FUN_800302b4(GameState *gs);
void FUN_8003056c(ObjCar *param_1,ObjCar *param_2,int param_3,uint *param_4);
void FUN_8003091c(int param_1,uint *param_2,int param_3);
void f_80031054_draw_ig_hud(int param_1,uint *param_2,int unk_ind);
undefined4 f_80031bac_easter_he1(ushort *param_1,ushort *param_2);
int f_80031c2c_EasterEggAccessible(int ind);
void f_80031c48_EasterEggMakeInaccessible(int ind);
int f_80031c7c_EasterEggRegister(int ii);
int f_80031cf4_EasterEggCode(int a0);
void FUN_80031d5c(void);
void FUN_80031da0(void);
void FUN_80031dc4(void);
void FUN_80031de8(void);
void FUN_80031e4c(void);
void FUN_80031ea0(void);
void FUN_80031f24(void);
void FUN_80031f48(void);
void FUN_80031f7c(void);
void FUN_80031fbc(void);
void f_80032064_draw_prims_stuff(int param_1);
void FUN_80032164(int param_1);
void f_800321b0_load_image_wrp(RECT *rect,uint *param_2);
void FUN_800321d8(RECT *param_1);
void f_80032290_LoadTIM(void *tim);
undefined4 FUN_80032358(undefined4 param_1,int *param_2,int *param_3);
byte * FUN_8003238c(undefined4 param_1,undefined4 param_2,byte *param_3);
byte * f_800323d8_cb_on_load_game_mr(undefined4 param_1,undefined4 param_2,byte *file_data);
byte * FUN_80032424(undefined4 param_1,undefined4 param_2,byte *param_3);
RegDir * f_80032470_reg_stuff77(char *nn,char *param_2,char *param_3);
RegDir * f_80032598_GetMatchingCarDirectory(char *car_name,int dunno);
void FUN_800325c8(undefined4 param_1,undefined4 param_2);
int f_800325f8_car_related_loads_fucks_stack(undefined4 param_1,byte *param_2,RegDir *rg,int param_4,char *param_5);
byte * f_80032780_cb_on_load_car_mr(char *na,char *param_2,byte *param_3);
byte * f_80032878_world_initz(undefined4 param_1,undefined4 param_2,byte *param_3);
undefined4 FUN_800328e0(undefined4 param_1,void *param_2);
void f_80032944_LoadFilesAdd(char *ch,undefined4 param_2,undefined4 param_3);
void f_800329d0_clear_load_files(void);
char * f_800329fc_str_unk_upper(char *s,char *out);
void f_80032ab4_load_files_wra(char *fn,char *ff,undefined4 param_3,undefined4 param_4);
void f_80032b20_loadingz(void);
void f_80032e58_player_strings(char *param_1,int param_2);
void f_80032ef8_car_related_setups(int param_1,int param_2);
void f_80033314_maybe_cust_car_rel(void);
void FUN_800336e0(int param_1);
void FUN_8003395c(void);
byte * f_800339c8_font_related1(char *ss);
void FUN_80033a5c(void);
void f_80033ab4_FontConstructor(char *param_1,undefined param_2,undefined *param_3);
int FUN_80033c9c(int param_1,int param_2,char param_3);
undefined FUN_80033d6c(int param_1,int param_2,char param_3);
byte FUN_80033e08(char *param_1);
byte FUN_80033e40(char *param_1);
byte FUN_80033e78(char *param_1);
int FUN_80033eb0(char *param_1,char *param_2);
void FUN_80033f94(int *param_1,undefined4 param_2,undefined4 param_3,int param_4);
void FUN_80033fd4(int *param_1,undefined4 param_2,undefined4 param_3,int param_4);
void FUN_80034020(int param_1);
undefined4 f_80034034_FontPrimsConstructor(int *param_1,int param_2,int param_3);
void FUN_80034138(undefined4 *param_1);
int f_80034190_text1(char *param_1,char *param_2,int param_3,int param_4,int *param_5,uint *param_6,uint param_7,int *param_8);
void f_80034644_sprintf(char *param_1,char *param_2,...);
int f_80034674_hud_msg_related(int param_1,byte *param_2,GameState **param_3);
void FUN_80034e48(void);
void FUN_80034e8c(void);
void FUN_80034eb0(void);
void FUN_80034ed4(void);
void FUN_80034f38(void);
void FUN_80034f8c(void);
void FUN_80035010(void);
void FUN_80035034(void);
int f_80035068_cb_null_match(void);
int f_80035070_GameIsBossCar(char *nam);
char * f_800351ac_rand_get_non_boss_car_name(void);
undefined4 FUN_80035224(undefined4 param_1);
char * FUN_80035298(int param_1);
void FUN_80035324(void);
int f_80035344_cb_match_unkunk(GameState *gs,int nu);
void FUN_800354e4(int param_1);
void f_8003557c_cb_match_sta(GameState *gs);
void f_800355ec_game_cb2(MaybeGameStru *as);
int FUN_80035900(int param_1,undefined4 param_2,char **param_3,int param_4,undefined4 param_5,int param_6,uint param_7);
int f_80035aa8_cb_match_res(GameState *gs,int param_2,undefined4 param_3,undefined4 param_4);
int f_80035f5c_cbs(GameState *gs,int param_2);
int f_80035fc4_cb_lost_match(GameState *gs,int param_2,undefined4 param_3);
int f_8003602c_cb_null5(GameState *gs);
int FUN_80036034(char *param_1,char *param_2);
RegDir * f_800360b8_reg_stuff1(char *ss,char *param_2);
void FUN_8003614c(undefined4 param_1);
void FUN_80036174(char *param_1);
void f_8003619c_reg_unk2(undefined4 param_1);
int FUN_800361c4(char *param_1);
RegDir * f_80036260_get_world_unk(char *param_1);
undefined4 FUN_80036288(undefined4 param_1);
char * FUN_80036300(int param_1);
void f_8003638c_GameGetFirstTournamentWorldName(void);
int f_800363ac_GameGetNumberOfTournamentWorlds(void);
int f_8003641c_cb_maybe_tournament(GameState *gs,int param_2);
void f_80036808_st(MaybeGameStru *ss);
void f_800368c4_cb_cre_cars_wrap(GameState *gs);
int f_80036938_struct_sh(GameState *ss);
int f_80036988_cbcb_tournament(GameState *gs);
void f_800369d4_cb_cb_cb(GameState *s1);
void FUN_80036de4(int param_1,undefined4 param_2);
int f_80036e5c_cb_before_boss(GameState *gs,int param_2);
int f_800371c0_cb_game9(GameState *gs,int param_2,int param_3);
void FUN_80037498(int param_1,int param_2,int param_3);
void f_80037610_some_inits(void);
void f_800377b0_sometimer_cb(int vv);
void f_800377bc_cb_create_cars(int ind,int param_2);
int f_80037acc_game_related_cb_call(void);
void FUN_80037af8(void);
undefined4 FUN_80037b24(undefined4 param_1);
void f_80037b64_callback_wrap(void);
void FUN_80037bac(int param_1,int *param_2);
void FUN_80037e2c(int param_1,undefined4 param_2,char **param_3,uint param_4,int param_5);
void FUN_80037fe4(void);
void f_80038008_game_cb_call(int param_1);
void f_80038038_GameRegisterCar(byte *mb_car);
void f_80038120_GameUnregisterCar(ObjCar *car);
int f_80038410_GameIsCarRegistered(ObjCar *car);
void f_8003845c_GamePadVibrateS(int ind);
void f_car_8003848c_GamePadVibrateTS(int param_1);
void f_800384bc_setup_game_callbacks(void);
byte * f_80038804_util5(RegDir *dr,int iii,char *nana);
int f_80038854_util4(char *nn,int ind);
void f_80038964_utilz2(char *na);
void FUN_80038984(char *param_1);
int f_800389ac_reg_num_worlds(void);
char * f_800389d0_reg_get_world_by_ind(int ii);
char * FUN_800389f8(int param_1);
void FUN_80038acc(int param_1);
int FUN_80038b10(int param_1);
void FUN_80038b50(undefined2 *param_1,undefined4 param_2,int param_3);
void FUN_80038c50(int param_1,int param_2,int param_3,int param_4,int param_5);
undefined4 FUN_80038db0(byte *param_1,int param_2,int param_3,uint *param_4,uint **param_5,int param_6);
void FUN_80039064(SVECTOR *param_1,uint param_2,uint *param_3,int param_4,uint **param_5,int param_6,uint *param_7,int param_8);
void FUN_80039274(SVECTOR *param_1,uint *param_2,int param_3,uint **param_4,int param_5,uint *param_6,int param_7);
void FUN_800394dc(SVECTOR *param_1,uint param_2,int param_3,uint **param_4,uint param_5,uint *param_6,int param_7);
void f_80039764_DisplayAnimCard(SVECTOR *verts,void *ptr_tex_stuff,uint clr,int param_4,int param_5,uint **ret_z_maybe,uint *param_7,int param_8);
void FUN_80039924(SVECTOR *param_1,uint *param_2,uint *param_3,int param_4,int param_5,uint **param_6,uint *param_7,int param_8);
byte * f_80039ae8_GetTexBox(char *param_1,RegDir *param_2,undefined4 param_3);
byte * f_80039bac_GetRegData(char *nam,RegDir *rg,RegDir *rg2,int param_4);
void f_80039c3c_rg_helper9(RegDir *rg,int *iii,RegDir **rrr);
RegDir ** f_80039d5c_FindAndAllocateDirectoryPtrs(RegDir *rg1,char *a1,char *a2,int *rrr);
int ResetGraph(int mode);
int SetGraphDebug(int level);
byte SetGraphQueue(uint param_1);
int GetGraphDebug(void);
u_long DrawSyncCallback(func *func);
void SetDispMask(int mask);
int DrawSync(int mode);
void FUN_8003a26c(undefined4 param_1,short *param_2);
int ClearImage(RECT *rect,u_char r,u_char g,u_char b);
int ClearImage2(RECT *rect,u_char r,u_char g,u_char b);
int LoadImage(RECT *rect,u_long *p);
int StoreImage(RECT *rect,u_long *p);
int MoveImage(RECT *rect,int x,int y);
u_long * ClearOTag(u_long *ot,int n);
u_long * ClearOTagR(u_long *ot,int n);
void DrawPrim(void *p);
void DrawOTag(u_long *p);
DRAWENV * PutDrawEnv(DRAWENV *env);
void DrawOTagEnv(u_long *p,DRAWENV *env);
DRAWENV * GetDrawEnv(DRAWENV *env);
DISPENV * PutDispEnv(DISPENV *env);
DISPENV * GetDispEnv(DISPENV *env);
int GetODE(void);
void SetDrawArea(DR_AREA *p,RECT *r);
void SetDrawOffset(DR_OFFSET *p,u_short *ofs);
void SetDrawEnv(DR_ENV *dr_env,DRAWENV *env);
void FUN_8003b248(int param_1,undefined4 *param_2);
uint FUN_8003b4b8(int param_1,int param_2,uint param_3);
uint FUN_8003b4d8(uint param_1,uint param_2);
uint FUN_8003b570(uint param_1,uint param_2);
uint FUN_8003b608(uint param_1,uint param_2);
uint FUN_8003b624(byte *param_1);
dword FUN_8003b6a4(void);
dword FUN_8003b6bc(int param_1,dword param_2);
undefined4 FUN_8003b79c(undefined4 *param_1,uint param_2);
undefined4 FUN_8003b9cc(int param_1,dword *param_2);
undefined4 FUN_8003bc08(int param_1,dword *param_2);
void FUN_8003be88(uint param_1);
undefined4 FUN_8003bec0(dword *param_1,int param_2);
void FUN_8003bf00(dword param_1);
uint FUN_8003bf48(uint param_1);
void FUN_8003bf78(undefined4 param_1,undefined4 param_2,undefined4 param_3);
uint FUN_8003bf9c(code *param_1,undefined4 *param_2,int param_3,undefined4 param_4);
uint FUN_8003c24c(void);
undefined4 FUN_8003c4ac(uint param_1);
uint FUN_8003c5fc(int param_1);
void FUN_8003c738(void);
undefined4 FUN_8003c76c(void);
undefined8 FUN_8003c8b0(uint param_1);
int LoadImage2(RECT *rect,u_long *p);
int StoreImage2(RECT *rect,u_long *p);
int MoveImage2(RECT *rect,int x,int y);
int DrawOTag2(u_long *p);
void _GPU_ResetCallback(void);
void FUN_8003cd90(undefined *param_1,undefined param_2,int param_3);
char f_8003cdb8_toupper(char cc);
char f_8003cdec_tolower(char cc);
int ResetCallback(void);
void InterruptCallback(void);
void DMACallback(void);
int VSyncCallback(f *f);
void VSyncCallbacks(void);
int StopCallback(void);
int RestartCallback(void);
int CheckCallback(void);
word GetIntrMask(void);
word SetIntrMask(word param_1);
undefined2 * FUN_8003cfbc(void);
void FUN_8003d094(void);
int FUN_8003d264(uint param_1,int param_2);
undefined2 * FUN_8003d3ac(void);
undefined2 * FUN_8003d44c(void);
void FUN_8003d4c4(undefined4 *param_1,int param_2);
void InitGeom(void);
void __SN_ENTRY_POINT(void);
void __main(void);
void __do_global_dtors(void);
char * f_8003d6f8_strcat(char *aa,char *bb);
int f_3003d7a8_strlen(char *str);
char * f_8003d7e8_strcpy(char *aa,char *bb);
long SetVideoMode(long mode);
void SsSetVoiceMask(ulong param_1);
ulong SsGetVoiceMask(void);
int VSync(int mode);
void FUN_8003d9e0(int param_1,int param_2);
DISPENV * SetDefDispEnv(DISPENV *env,int x,int y,int w,int h);
void SwExitCriticalSection(void);
char * strstr(char *param_1,char *param_2);
void SwEnterCriticalSection(void);
void FlushCache(void);
char * f_8003db78_strncpy(char *a0,char *a1,int a2);
void * memset(void *param_1,int param_2,int param_3);
int f_8003dc18_strcmp(char *aa,char *bb);
void * memmove(uchar *param_1,uchar *param_2,int param_3);
void PushMatrix(void);
void PopMatrix(void);
long SquareRoot0(long a);
void LightColor(VECTOR *v0,VECTOR *v1);
void DpqColorLight(VECTOR *v0,CVECTOR *v1,long p,CVECTOR *v2);
void DpqColor3(CVECTOR *v0,CVECTOR *v1,CVECTOR *v2,long p,CVECTOR *v3,CVECTOR *v4,CVECTOR *v5);
void Intpl(VECTOR *v0,long p,CVECTOR *v1);
VECTOR * Square12(VECTOR *v0,VECTOR *v1);
VECTOR * Square0(VECTOR *v0,VECTOR *v1);
long AverageZ3(long sz0,long sz1,long sz2);
long AverageZ4(long sz0,long sz1,long sz2,long sz3);
void OuterProduct12(VECTOR *v0,VECTOR *v1,VECTOR *v2);
void OuterProduct0(VECTOR *v0,VECTOR *v1,VECTOR *v2);
long Lzc(long data);
void SetGeomScreen(long h);
void SetGeomOffset(long ofx,long ofy);
void SetTransMatrix(MATRIX *m);
void SetRotMatrix(MATRIX *m);
DRAWENV * SetDefDrawEnv(DRAWENV *env,int x,int y,int w,int h);
int __builtin_vec_delete(void);
void PadStartCom(void);
void PadStopCom(void);
bool PadChkMtap(int param_1);
int PadGetState(int param_1);
int PadInfoMode(int param_1,int param_2,int param_3);
int PadInfoAct(int param_1,int param_2,int param_3);
int PadInfoComb(int param_1,int param_2,int param_3);
int PadSetActAlign(int param_1,uchar *param_2);
int PadSetMainMode(int socket,int offs,int lock);
void PadSetAct(int param_1,uchar *param_2,int param_3);
void PadInitMtap(uchar *param_1,uchar *param_2);
void FUN_8003e994(int param_1);
void FUN_8003ec00(int param_1);
void FUN_8003ef68(void);
void FUN_8003ef9c(char param_1,undefined4 param_2);
void FUN_8003f210(void);
undefined4 FUN_8003f2e0(int param_1);
void CdReadBreak(void);
int CdRead(int sectors,u_long *buf,int mode);
int CdReadSync(int mode,u_char *result);
CdlCB CdReadCallback(CdlCB func);
undefined4 CdReadMode(undefined4 param_1);
void GsSetNearClip(PACKET *outpacketp);
int CdInit(void);
bool FUN_8003f9c8(void);
void FUN_8003fa04(void);
void FUN_8003fa2c(void);
void FUN_8003fa54(void);
int CdStatus(void);
int CdMode(void);
int CdLastCom(void);
CdlLOC * CdLastPos(void);
int CdReset(int mode);
void CdFlush(void);
int CdSetDebug(int level);
char * CdComstr(u_char com);
char * CdIntstr(u_char intr);
int CdSync(int mode,u_char *result);
int CdReady(int mode,u_char *result);
CdlCB CdSyncCallback(CdlCB func);
CdlCB CdReadyCallback(CdlCB func);
int CdControl(u_char com,u_char *param,u_char *result);
int CdControlF(u_char com,u_char *param);
int CdControlB(u_char com,u_char *param,u_char *result);
int CdMix(CdlATV *vol);
int CdGetSector(void *madr,int size);
int CdGetSector2(void *madr,int size);
_func_147 * CdDataCallback(func *func);
int CdDataSync(int mode);
CdlLOC * CdIntToPos(int i,CdlLOC *p);
int CdPosToInt(CdlLOC *p);
int strncmp(char *param_1,char *param_2,int param_3);
uint _spu_note2pitch(int param_1,int param_2,int param_3,int param_4);
uint _spu_pitch2note(int param_1,int param_2,ushort param_3);
VECTOR * ApplyMatrixLV(MATRIX *m,VECTOR *v0,VECTOR *v1);
long SpuSetTransferMode(long mode);
ulong SpuSetTransferStartAddr(ulong addr);
ulong SpuRead(uchar *addr,ulong size);
long ratan2(long y,long x);
void SpuSetVoicePitch(int vNum,ushort pitch);
void SpuSetKeyOnWithAttr(SpuVoiceAttr *attr);
void SpuSetCommonCDMix(long cd_mix);
void SpuSetKey(long on_off,ulong voice_bit);
long SpuRGetAllKeysStatus(long min_,long max_,char *status);
void SpuGetAllKeysStatus(char *status);
void SpuSetCommonMasterVolume(short mvol_left,short mvol_right);
void SpuSetCommonCDVolume(short cd_left,short cd_right);
void SpuInit(void);
void SpuSetVoiceVolume(int vNum,short volL,short volR);
long SpuIsTransferCompleted(long flag);
void SpuQuit(void);
void SpuSetVoiceAttr(SpuVoiceAttr *arg);
int CdGetToc(CdlLOC *loc);
int CdGetToc2(undefined4 param_1,byte *param_2);
long SquareRoot12(long a);
int __divdi3(int param_1,int param_2,int param_3,int param_4);
MATRIX * CompMatrix(MATRIX *m0,MATRIX *m1,MATRIX *m2);
MATRIX * TransposeMatrix(MATRIX *m0,MATRIX *m1);
VECTOR * ApplyMatrix(MATRIX *m,SVECTOR *v0,VECTOR *v1);
void RotTransSV(SVECTOR *v0,SVECTOR *v1,long *flag);
SVECTOR * SquareSS12(SVECTOR *v0,SVECTOR *v1);
SVECTOR * SquareSS0(SVECTOR *v0,SVECTOR *v1);
VECTOR * SquareSL12(SVECTOR *v0,VECTOR *v1);
VECTOR * SquareSL0(SVECTOR *v0,VECTOR *v1);
int rsin(int a);
int sin_1(int param_1);
u_short GetTPage(int tp,int abr,int x,int y);
void * memchr(uchar *param_1,uchar param_2,int param_3);
long RotTransPers4(SVECTOR *v0,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,long *sxy0,long *sxy1,long *sxy2,long *sxy3,long *p,long *flag);
int printf(char *fmt,...);
void GPU_cw(void);
void * memcpy(void);
int setjmp(int *param_1);
void longjmp(int *param_1,int param_2);
void SetCustomExitFromException(void);
undefined * startIntrVSync(void);
void FUN_80041e58(void);
void FUN_80041ef0(undefined4 *param_1,int param_2);
undefined * startIntrDMA(void);
void FUN_80041f6c(void);
void FUN_80042198(undefined4 *param_1,int param_2);
void CdRemove(void);
void ExitCriticalSection(void);
void ReturnFromException(void);
void ChangeClearPad(long param_1);
void ChangeClearRCnt(void);
int EnterCriticalSection(void);
void SetDefaultExitFromException(void);
void _patch_gte(void);
void InitHeap(ulong *param_1,ulong param_2);
void puts(char *param_1);
uint PadEnableCom(uint param_1);
void _padSetVsyncParam(void);
undefined4 FUN_800424d4(void);
undefined4 FUN_8004253c(void);
void _padChkVsync(void);
void _padStartCom(void);
void _padStopCom(void);
undefined4 _padInitSioMode(int param_1);
void FUN_80042b24(int param_1);
uint _padSioRW(int param_1,int param_2);
uint _padSioRW2(int param_1,undefined param_2);
undefined4 _padClrIntSio0(void);
void _padWaitRXready(void);
void _padSetAct(int param_1,undefined4 param_2,undefined param_3);
void _padSetCmd(int param_1,undefined param_2,undefined4 param_3,undefined param_4);
void _padSendAtLoadInfo(int param_1);
undefined4 _padRecvAtLoadInfo(int param_1);
int _padGetActSize(int param_1);
undefined4 _padLoadActInfo(int *param_1,int param_2);
void FUN_8004357c(int param_1);
undefined4 _padSetActAlign(int param_1,undefined4 param_2);
undefined4 _padSetMainMode(int param_1,char param_2,undefined param_3);
undefined4 FUN_80043c54(int param_1);
void _padCmdParaMode(int param_1,undefined param_2);
void FUN_80043cd4(int param_1);
void FUN_80043ce8(int param_1,undefined param_2);
void FUN_80043d08(int param_1,undefined param_2);
void FUN_80043d28(int param_1,undefined param_2);
void FUN_80043d48(int param_1);
void _padInitMtapSeq(void);
undefined4 FUN_80043d94(int param_1);
void FUN_80044004(int param_1);
void _mtapFailAuto(int param_1);
void * bzero(uchar *param_1,int param_2);
undefined4 FUN_80044820(void);
uint CD_sync(int param_1,undefined *param_2);
uint CD_ready(int param_1,undefined *param_2);
undefined4 CD_cw(byte param_1,byte *param_2,undefined *param_3,int param_4);
undefined4 CD_vol(int param_1);
void CD_flush(void);
undefined4 CD_initvol(void);
void CD_initintr(void);
undefined4 CD_init(void);
undefined4 CD_datasync(int param_1);
undefined4 CD_getsector(dword param_1,uint param_2);
undefined4 CD_getsector2(dword param_1,uint param_2);
void CD_set_test_parmnum(undefined4 param_1);
void FUN_80045eb0(void);
void DeliverEvent(ulong param_1,ulong param_2);
long _SpuInit(long on_off);
void SpuStart(void);
undefined4 _spu_init(int param_1);
void FUN_80046380(word *param_1,uint param_2);
void _spu_FiDMA(void);
void _spu_Fr_(dword param_1,word param_2,int param_3);
undefined4 _spu_t(int param_1,uint param_2,uint param_3);
undefined4 _spu_Fw(undefined4 param_1,undefined4 param_2);
undefined4 _spu_Fr(undefined4 param_1,undefined4 param_2);
void _spu_FsetRXX(int param_1,uint param_2,int param_3);
uint _spu_FsetRXXa(int param_1,uint param_2);
uint _spu_FgetRXXa(int param_1,int param_2);
void _spu_FsetPCR(int param_1);
void FUN_80046b88(void);
void FUN_80046bb0(void);
void _spu_Fw1ts(void);
long TestEvent(long param_1);
void _SpuDataCallback(undefined4 param_1);
long CloseEvent(long param_1);
long DisableEvent(long param_1);
undefined8 __udivmoddi4(uint param_1,uint param_2,uint param_3,uint param_4,uint *param_5);
int prnt(undefined4 param_1,byte *param_2,int **param_3);
void _putchar(byte param_1);
void _putchar_flash(void);
void putchar(char param_1);
void SysDeqIntRP(void);
void SysEnqIntRP(void);
void setRC2wait(undefined4 param_1);
bool chkRC2wait(void);
void FUN_80047c90(int param_1);
uint FUN_80047db0(int param_1);
int FUN_80047e5c(int param_1);
int FUN_80047f20(int param_1);
long OpenEvent(ulong param_1,long param_2,long param_3,func *func);
long EnableEvent(long param_1);
long FileWrite(long param_1,void *param_2,long param_3);
void f_afc_80210000_OSRegisterSoundEmitter(void);
void f_afc_80210050_AfcClassConstructor(RegDir *rg);
void f_afc_802101a8_help2(ObjAfc *afc);
int f_afc_80210208_ctor_help1(ObjAfc *afc,SVec3 *pos,uint *clr,short rot,int sz,int got_light);
int f_afc_80210330_AfcConstructor(ObjAfc *afc,ObjAfcParamz *prmz);
int f_afc_8021036c_AfcInstanceConstructor(ObjAfc *afc,RegDir *rg);
void f_afc_80210480_AfcDisplay(ObjAfc *afc,int param_2,uint **param_3,uint *param_4);
void f_afc_8021071c_AfcControlLightAndSize(ObjAfc *afc,int param_2);
void f_tele_80211000_TeleporterClassConstructor(RegDir *rg);
int f_tele_802111cc_ctor_help(ObjTeleporter *te,short *param_2,int param_3,short *param_4,short *param_5,uint *param_6);
int f_tele_802112c0_TeleporterConstructor(ObjTeleporter *te,ObjTeleporterParamz *prm);
int f_tele_802112fc_TeleporterInstanceConstructor(ObjTeleporter *tele,RegDir *rg);
void f_tele_802113e4_TeleporterProcess(ObjTeleporter *tele);
void f_tele_80211544_TeleporterDisplay(ObjTeleporter *tele,int param_2,uint **param_3,uint *param_4);
void f_tele_802117c4_disp_help1(short *unk,ObjTeleporter *tele);
byte * f_tele_802118c4_get_wrap(RegDir *rg,char *na,byte *fallback);
MATRIX * f_tele_802118f4_RotMatrixZ(long r,MATRIX *m);
void f_tele_80211a94_RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);
int f_timer_80212000_TimerConstructor(ObjTimer *tm,ObjTimerParamzUnkSize *pp);
void f_timer_80212070_TimerProcess(ObjTimer *tm);
void f_destry_80213000_OSRegisterCarWeapon(void);
void f_destry_80213030_OSRegisterBuildMatrixFunc(void);
void f_destry_80213060_OSRegisterAi(void);
void f_destry_802130d8_OSRegisterSoundEmitter(void);
void f_destry_80213128_OSRegisterAnimInfo(void);
void f_destry_80213158_OSRegisterExplosion(void);
void f_destry_80213188_face_cb(DispFaceHead *face,SVECTOR *vv);
void f_destry_802132dc_create_frags(ObjDestroyable *de,short xx,short yy,short zz);
int f_destry_8021331c_DestroyableApplyDamage(ObjDestroyable *de,int amount,int xx,int yy,int zz);
int f_destry_80213474_cre_help1(ObjDestroyable *de,RegDir *rg,int hp);
int f_destry_802134f0_DestroyableConstructor(ObjDestroyable *de,ObjDestroyableParamz *prmz);
int f_destry_8021351c_DestroyableInstanceConstructor(ObjDestroyable *de,RegDir *rg);
void f_destry_80213598_DestroyableProcess(ObjDestroyable *de);
void f_destry_802135b8_DestroyableDestructor(ObjDestroyable *de);
void f_frag_80214000_OSRegisterCarWeapon(void);
void f_frag_80214030_OSRegisterBuildMatrixFunc(void);
void f_frag_80214060_OSRegisterAi(void);
void f_frag_802140d8_OSRegisterCarAi(void);
void f_frag_8021413c_OSRegisterSoundEmitter(void);
void f_frag_8021418c_OSRegisterCarPhysics(void);
void f_frag_8021422c_OSRegisterCarDisplay(void);
void f_frag_8021425c_OSRegisterCar(void);
void f_frag_80214298_OSRegisterAnimInfo(void);
void f_frag_802142c8_OSRegisterExplosion(void);
int f_frag_802142f8_FragmentConstructor(ObjFragment *frg,ObjFragmentParamz *prm);
void f_frag_80214b30_FragmentProcess(ObjFragment *frg);
void f_frag_80214d48_FragmentDisplay(ObjFragment *frg,int param_2,uint **param_3,uint *param_4,MATRIX *mtx);
MATRIX * f_frag_80215174_MulMatrix(MATRIX *m0,MATRIX *m1);
void f_carprt_80216000_OSRegisterCarWeapon(void);
void f_carprt_8021622c_OSRegisterCarDisplay(void);
int f_carprt_802162f8_CarpartConstructor(ObjCarpart *cp,ObjCarpartParamz *prm);
void f_carprt_80216570_CarpartProcess(ObjCarpart *cp);
void f_carprt_8021675c_CarpartDisplay(ObjCarpart *cp,int param_2,uint **param_3,uint *param_4,MATRIX *mtx);
MATRIX * f_carprt_80216b04_MulMatrix(MATRIX *m0,MATRIX *m1);
void f_camera_80217000_CameraDestructor(ObjCamera *ca);
int f_camera_802170f8_CameraSetObject(ObjCamera *cam,void *obj_juice);
void f_camera_80217338_inv_mtx(ObjCamera *cam);
int f_camera_80217358_CameraConstructor(ObjCamera *cam,ObjCameraParamz *paramz);
void f_camera_80217410_CameraProcess(ObjCamera *cam);
void f_bullet_80218000_OSRegisterCarWeapon(void);
void f_bullet_80218030_OSRegisterBuildMatrixFunc(void);
int f_bullet_802182f8_BulletClassConstructor(RegDir *rg);
int f_bullet_80218364_create_help(ObjBullet *bu,void *maybe_owner,ObjBulletParamz *qqq);
int f_bullet_802184e0_BulletConstructor(ObjBullet *bu,ObjBulletParamz *prmz);
int f_bullet_80218504_BulletProjectileConstructor(BulletProjectile *bu,void *not_sure_obj,SVECTOR *pos,SVECTOR *maybe_vel);
void f_bullet_80218534_BulletDestructor(ObjBullet *bu);
void f_bullet_80218564_BulletProjectileDestructor(BulletProjectile *bb);
int f_bullet_80218584_BulletProjectileProcess(BulletProjectile *proj,void *host_obj,int dmg);
void f_bullet_802189fc_BulletProcess(ObjBullet *bu);
void f_bullet_80218b70_BulletDisplay(ObjBullet *bu,int unk1,uint **unku,uint *unk2);
void f_expl_8021a000_OSRegisterSoundEmitter(void);
ExpDefinition * f_expl_8021a3e8_find_def_by_name(char *ss);
void f_expl_8021a488_ExplosionShockWaveClassConstructor(RegDir *rgrg);
void f_expl_8021a9c0_ExplosionShockWaveClassDestructor(void);
int f_expl_8021a9e8_ExplosionShockWaveConstructor(ObjExplosionShockWave *ex,ObjExplosionShockWaveParamz *prmz);
void f_expl_8021ac80_ExplosionShockWaveProcess(ObjExplosionShockWave *ex);
void f_expl_8021ae98_ExplosionShockWaveDestructor(ObjExplosionShockWave *ex);
void f_expl_8021aecc_ExplosionShockWaveDisplay(ObjExplosionShockWave *ex,undefined4 param_2,undefined4 param_3,undefined4 param_4,MATRIX *mtx);
void f_expl_8021b080_disp_he1(ObjExplosionShockWave *ex,int param_2,uint **param_3,uint *param_4);
void f_expl_8021b368_proc_help_raycasts(ObjExplosionShockWave *ex);
MATRIX * f_expl_8021b5ec_RotMatrixX(long r,MATRIX *m);
void f_expl_8021b78c_RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);
void f_power_8021c000_OSRegisterCarWeapon(void);
void f_power_8021c030_OSRegisterBuildMatrixFunc(void);
void f_power_8021c060_OSRegisterAi(void);
int f_power_8021ca04_cre_util(ObjPowerup *pw,char *na,int param_3,int amount,int px,int py,int pz,int need_sparkle);
int f_power_8021ce24_PowerupConstructor(ObjPowerup *pw,ObjPowerupParams *prm);
int f_power_8021ce70_PowerupInstanceConstructor(ObjPowerup *pw,RegDir *rg);
void f_power_8021cf80_PowerupSparkleConstructor(ObjPowerup *pw);
void f_power_8021d028_PowerupProcess(ObjPowerup *pw);
int f_power_8021d144_InteractCarWithPowerupHealth(ObjCar *car,ObjPowerup *pw);
int f_power_8021d22c_InteractCarWithPowerupTurbo(ObjCar *car,ObjPowerup *pw);
int f_power_8021d288_InteractCarWithPowerupWeapon(ObjCar *car,ObjPowerup *pw);
void f_power_8021d310_PowerupDoDisplay(void *maybe_model,int param_2,int param_3,uint *param_4,uint **param_5,uint *param_6);
void f_power_8021d560_PowerupDisplay(ObjPowerup *pwr,int param_2,undefined4 param_3,undefined4 param_4,MATRIX *mtx);
void f_power_8021d6d8_PowerupScreenDisplay(ObjPowerup *pw,int rot_y,int off_x,int off_y,long zzz,undefined4 param_6,undefined4 param_7,undefined4 param_8);
long ReadGeomScreen(void);
void ReadGeomOffset(long *ofx,long *ofy);
void SetLightMatrix(MATRIX *m);
void SetBackColor(long rbk,long gbk,long bbk);
void SetColorMatrix(MATRIX *m);
MATRIX * MulMatrix0(MATRIX *m0,MATRIX *m1,MATRIX *m2);
void f_anim_8021e000_OSRegisterSoundEmitter(void);
char ** f_anim_8021e3e0_helpz(RegDir *rg,char *nam,char **param_3,int *param_4);
AnimEntryC_anim_info * f_anim_8021e590_GetAnimInfo(char *nam);
AnimStr0x18 * f_anim_8021e630_anim_preset_find(char *nam);
void f_anim_8021e750_AnimClassConstructor(RegDir *rgrg);
void f_anim_8021f044_AnimClassDestructor(void);
int f_anim_8021f160_AnimConstructor(ObjAnim *an,ObjAnimParamz *par);
void f_anim_8021f748_AnimDestructor(ObjAnim *an);
void f_anim_8021f76c_AnimProcess(ObjAnim *an);
void f_anim_8021f974_disp_help3(SVECTOR *vertz,uint angle);
void f_anim_8021fa60_disp_help(SVECTOR *vrt,SVECTOR *off,uint ang,int www,int hhh,int param_6);
void f_anim_8021fb70_AnimDisplay(ObjAnim *an,int param_2,uint **param_3,uint *param_4);
int f_anim_8021fd70_InteractCarWithAnim_goggle(ObjCar *car,ObjAnim *an);
void f_anim_8021fdd8_RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);
void f_sound_80221000_SoundEmitterClassConstructor(RegDir *rg);
int f_sound_80221010_ctor_help(ObjSoundEmitter *se,char *snd_name,uint fla,short xx,short yy,short zz,short xx2,short yy2,short zz2,int pitch_scale,int param_11);
int f_sound_80221494_SoundEmitterConstructor(ObjSoundEmitter *se,ObjSoundEmitterParamz *paramz);
int f_sound_80221584_SoundEmitterInstanceConstructor(ObjSoundEmitter *se,RegDir *rg);
void f_sound_80221630_SoundEmitterSetPitchScale(ObjSoundEmitter *se,int sc);
void f_sound_802216c0_SoundEmitterSetVolumeScale(ObjSoundEmitter *se,int ss);
void f_sound_80221738_SoundEmitterDestructor(ObjSoundEmitter *es);
void f_sound_802217cc_unk(ObjSoundEmitter *se,int vv);
void f_sound_802218b0_SoundEmitterProcess(ObjSoundEmitter *se);
void f_sound_80221a74_SoundEmitterSetVolumeFade(ObjSoundEmitter *se,int qq);
int f_convey_80222000_ctor_help(ObjConveyer *con,RegDir *my_dir,int speed);
int f_convey_80222064_ConveyerConstructor(ObjConveyer *con,ObjConveyerParamz *prm);
int f_convey_80222090_ConveyerInstanceConstructor(ObjConveyer *con,RegDir *rg);
int f_jump_80223000_ctor(ObjJumppad *jp,int px,int py,int pz,int radius,short dx,short dy,short dz,int accel,int one_way);
int f_jump_802230a4_JumppadConstructor(ObjJumppad *jp,ObjJumppadParamz *par);
int f_jump_80223100_JumppadInstanceConstructor(ObjJumppad *jp,RegDir *rg);
void f_jump_802231e8_JumppadProcess(ObjJumppad *jp);
void f_jump_80223208_JumppadDestructor(ObjJumppad *jp);
int f_light_80224000_ctor(ObjLightEmitter *em,uint fla,int rr,int gg,int bb,int rad,int radius,short px,short py,short pz,short ux,short uy,short uz);
int f_light_802241b0_LightEmitterConstructor(ObjLightEmitter *em,ObjLightEmitterParamz *par);
int f_light_8022429c_LightEmitterInstanceConstructor(ObjLightEmitter *em,RegDir *rg);
void f_weap_80225000_OSRegisterSoundEmitter(void);
void f_weap_80225470_WeaponClassConstructor(RegDir *rg);
void f_weap_80225508_WeaponProjectileClassConstructor(RegDir *rg);
void f_weap_8022553c_WeaponProjectileClassDestructor(void);
undefined4 FUN_802255ec(char *param_1);
void f_weap_80225638_unk1(RegDir *rg);
int f_weap_80225fa8_unk_find(char *nana);
int f_weap_8022603c_WeaponProjectileConstructor(ObjWeaponProjectile *proj,ObjWeaponProjectileParamz_unk_sz *prm);
void f_weap_80226334_WeaponProjectileDestructor(ObjWeaponProjectile *pro);
void f_weap_80226394_WeaponProjectileProcess(ObjWeaponProjectile *proj);
void f_weap_802263bc_WeaponProjectileDisplay(ObjWeaponProjectile *pro);
void f_weap_802263ec_proj_fillz(ObjWeaponProjectile *proj);
int f_weap_80226448_proj_func_disp_setup(ObjWeaponProjectile *proj,SVECTOR *vc,int p3);
void f_weap_802264d4_proj_he6(ObjWeaponProjectile *pro,SVECTOR *sv,int index);
int f_weap_80226694_proj_afc_stuff(ObjWeaponProjectile *proj,int index);
void f_weap_80226770_proj_he5(ObjWeaponProjectile *pro,int index);
void f_weap_802267a0_proj_unks(ObjWeaponProjectile *proj,int val);
void f_weap_802268d8_ProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_80226d1c_MIRVProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_80226dd8_AutolobProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_80226e8c_Rain2ProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_80226f48_SkullProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_80226f9c_TeleorbProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_80226fbc_proj_proc_he9(ObjWeaponProjectile *ppp);
void f_weap_80226fe0_Quasar1ProjectilePhysics(ObjWeaponProjectile *param_1);
void f_weap_80227000_Quasar2ProjectilePhysics(ObjWeaponProjectile *param_1);
void f_weap_80227020_Quasar3ProjectilePhysics(ObjWeaponProjectile *param_1);
void f_weap_80227040_unk_proc(ObjWeaponProjectile *param_1);
void f_weap_80227060_Hench1ProjectilePhysics(ObjWeaponProjectile *param_1);
void f_weap_8022710c_Hench2ProjectilePhysics(ObjWeaponProjectile *pro);
void f_weap_802271d0_Hench3ProjectilePhysics(ObjWeaponProjectile *param_1);
void f_weap_802272ec_RainProjectilePhysics(ObjWeaponProjectile *param_1);
void f_weap_80227384_cb_funny_on_destr(undefined2 param_1,undefined4 param_2,undefined2 param_3);
void f_weap_80227404_FunnyProjectileOnDestroy(ObjWeaponProjectile *proj);
void f_weap_802275dc_DetnoProjectileOnDestroy(ObjWeaponProjectile *proj);
int f_weap_802275fc_proj_unks_anim(ObjWeaponProjectile *pro);
void f_weap_80227888_cb_nuke_proj_destr(undefined2 param_1,undefined4 param_2,undefined2 param_3);
void f_weap_802278d4_cb_timer_nuke_destr(undefined2 param_1,undefined2 param_2,undefined2 param_3,undefined4 param_4,short param_5);
void f_weap_80227940_NukeProjectileOnDestroy(ObjWeaponProjectile *proj);
void f_weap_80227b68_proj_derp1(ObjWeaponProjectile *pro);
void f_weap_80227efc_proj_explo(ObjWeaponProjectile *proj);
void f_weap_80227fdc_proj_help3(ObjCar *car,uint *unk_str,int val);
void f_weap_802280a0_disp_he1(ObjWeaponProjectile *proj,undefined4 param_2,undefined4 param_3,undefined4 param_4);
void f_weap_80228340_disp_he2(ObjWeaponProjectile *proj,int param_2,uint **param_3,uint *param_4,MATRIX *mtx);
void f_weap_802284ac_ProjectileDisplay(ObjWeaponProjectile *proj,undefined4 param_2,undefined4 param_3,undefined4 param_4,MATRIX *mtx);
undefined4 f_weap_802285b4_WeaponDisplay(ObjWeaponTarget *ta,int param_2,uint **param_3,uint *param_4);
void f_weap_80228c54_RotateProjectileDisplay(ObjWeaponProjectile *pro,int param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5,MATRIX *param_6);
void f_weap_80228db8_BladeProjectileDisplay(ObjWeaponProjectile *proj,undefined4 param_2,undefined4 param_3,undefined4 param_4,undefined4 param_5);
void f_weap_80228df4_SkullProjectileDisplay(ObjWeaponProjectile *proj,undefined4 param_2,undefined4 param_3,undefined4 param_4,MATRIX *mtx);
void f_weap_80228e30_proj_vec_ang_stuff(SVECTOR *sv,int ang);
void * f_weap_80228ed0_bomb_util1(char *na);
int f_weap_80228f70_box_stuff(byte *param_1,SVECTOR *mimi,SVECTOR *mama);
void f_weap_8022909c_WeaponBombClassConstructor(RegDir *rgrg);
void f_weap_80229420_WeaponBombClassDestructor(void);
int f_weap_802294a8_bomb_ctor(ObjWeaponBomb *bo,char *nam,SVECTOR *pos);
int f_weap_80229678_WeaponBombInstanceConstructor(ObjWeaponBomb *bo,RegDir *rg);
int f_weap_802296ec_WeaponBombConstructor(ObjWeaponBomb *bo,uint *todo);
void f_weap_80229718_WeaponBombDestructor(ObjWeaponBomb *bo);
void f_weap_8022995c_WeaponBombProcess(ObjWeaponBomb *bo);
void f_weap_80229a28_WeaponBombDisplay(ObjWeaponBomb *bo,undefined4 param_2,undefined4 param_3,undefined4 param_4,MATRIX *mtx);
int f_weap_80229acc_WeaponBombApplyDamage(ObjWeaponBomb *bo,int amo);
void f_weap_80229b0c_WeaponTargetClassConstructor(RegDir *rg);
int f_weap_80229b98_WeaponTargetConstructor(ObjWeaponTarget *ta,uint *todo);
void f_weap_80229c70_WeaponTargetDestructor(ObjWeaponTarget *trg);
void f_weap_80229d94_WeaponTargetDisplay(ObjWeaponTarget *ta,undefined4 param_2,undefined4 param_3,undefined4 param_4,MATRIX *mtx);
void f_weap_80229e34_WeaponFireballClassConstructor(RegDir *param_1,undefined4 param_2,undefined4 param_3,int param_4);
int f_weap_80229f00_WeaponFireballConstructor(ObjWeaponFireball *fb,uint *todo);
void f_weap_80229fd4_WeaponFireballProcess(ObjWeaponFireball *fb);
void f_weap_8022a1a4_WeaponFireballDisplay(ObjWeaponFireball *fb,int param_2,uint **param_3,uint *param_4);
void f_weap_8022a2d0_WeaponFireballDestructor(ObjWeaponFireball *fb);
void f_weap_8022a370_RicochetProjectilePhysics(ObjWeaponProjectile *proj);
void f_weap_8022a7b0_prepare_faces(byte *shd,byte *faces,uint *param_3);
MATRIX * f_weap_8022a858_RotMatrixX(long r,MATRIX *m);
MATRIX * f_weap_8022a9f8_RotMatrixY(long r,MATRIX *m);
SVECTOR * f_weap_8022ab98_ApplyMatrixSV(MATRIX *m,SVECTOR *v0,SVECTOR *v1);
void f_weap_8022abf8_RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);
int f_weap_8022ac28_rcos(int a);
void f_w_neon_80230000_OSRegisterCarWeapon(void);
void f_w_neon_80230030_OSRegisterBuildMatrixFunc(void);
void f_w_neon_80230348_OSRegisterInteract(void);
SVECTOR * f_w_neon_80230410_pathing_get_pt_maybe(PathingInfo *pa,int pt_index);
void f_w_neon_8023049c_pathing_unks(PathingInfo *pa,int vava);
void f_w_neon_802306f0_pathing_set_unk1(PathingInfo *pa,int va);
int f_w_neon_802307b4_PathingInfoInstanceConstructor(PathingInfo *pa,RegDir *rg);
void f_w_neon_802308ec_PathingInfoDestructor(PathingInfo *pa);
void f_w_neon_8023091c_PathingInfoProcess(PathingInfo *pa);
int f_w_neon_80230df0_pathing_spline_maybe(int a0,int a1,int a2,int a3,int aaa);
int f_w_neon_80230e94_pathing_calcz(int a0,int a1,int a2,int a3,int aaa);
void f_w_neon_80230f28_pathing_calc_pt(int ff,short *param_2,short *param_3,short *param_4,short *param_5,SVECTOR *result);
void f_w_neon_80230ff4_pathing_interp_maybe(int amo,SVECTOR *v1,SVECTOR *v2,SVECTOR *v3,SVECTOR *v4,SVECTOR *resu);
void f_w_neon_802310c0_pathing_he3(int val,short *ooo,int val3,int num,short *arr);
void f_w_neon_80231274_TrainClassConstructor(RegDir *rg);
int f_w_neon_80231298_TrainApplyDamage(ObjTrain *tra,int amount,SVECTOR *unk);
void f_w_neon_80231308_TrainProcess(ObjTrain *tra);
int f_w_neon_80231394_TrainInstanceConstructor(ObjTrain *tra,RegDir *rg);
void f_w_neon_80231534_TrainDestructor(ObjTrain *tra);
void f_w_neon_8023156c_TrainDisplay(ObjTrain *tra,void *param_2,uint **param_3,undefined4 param_4,MATRIX *mtx);
int f_w_neon_802315f8_InteractCarWithTrain(ObjCar *car,ObjTrain *tra);
int f_w_neon_802318a0_InteractTrainWithBullet(ObjTrain *tra,ObjBullet *bu);
int f_w_neon_80231930_InteractTrainWithExplosionShockWave(ObjTrain *tra,ObjExplosionShockWave *ex);
void f_w_neon_802319a8_TrainCameraProcess(ObjTrain *tra,ObjCamera *cam);
void f_w_neon_802319f0_UfoClassConstructor(RegDir *rg);
void f_w_neon_80231a6c_ufo_snd_rel(ObjUfo *ufo);
void f_w_neon_80231abc_UfoProcess(ObjUfo *ufo);
int f_w_neon_80232060_UfoInstanceConstructor(ObjUfo *ufo,RegDir *rg);
void f_w_neon_802322a4_UfoDestructor(ObjUfo *ufo);
void f_w_neon_802322d4_UfoConeDisplay(ObjUfo *ufo,int param_2,uint **param_3,uint *param_4,MATRIX *mtx,int param_6,SVECTOR *pp,int maybe_len);
void f_w_neon_802328a8_UfoDisplay(ObjUfo *ufo,void *param_2,uint **param_3,undefined4 param_4,MATRIX *mtx);
int f_w_neon_80232998_InteractUfoWithBullet(ObjUfo *ufo,ObjBullet *bu);
int f_w_neon_802329c8_InteractUfoWithWeaponProjectile(ObjUfo *ufo,ObjWeaponProjectile *proj);
int f_w_neon_802329f8_UfoApplyDamage(ObjUfo *ufo,undefined4 param_2,undefined4 param_3);
void f_w_neon_80232a60_UfoCameraProcess(ObjUfo *ufo,ObjCamera *cam);
void f_w_yard_80238000_OSRegisterCarWeapon(void);
void f_w_yard_80238410_CraneClassConstructor(RegDir *rg);
int f_w_yard_80238510_CraneControlConstructor(ObjCraneControl *cc,ObjCraneControlParamz *prmz);
void f_w_yard_8023856c_CraneControlDestructor(ObjCraneControl *cc);
int f_w_yard_8023858c_InteractCraneControlWithOtherObject(ObjCraneControl *cc,void *other_obj_juice);
int f_w_yard_802386a4_CraneInstanceConstructor(ObjCrane *cra,RegDir *rg);
void f_w_yard_802388a8_cra_help1(ObjCrane *cra);
void f_w_yard_80238988_crane_on_destr(ObjCrane *cra);
void f_w_yard_80238a94_CraneDestructor(ObjCrane *cra);
void f_w_yard_80238ad0_CraneProcess(ObjCrane *cra);
void f_w_yard_802393f0_CraneCameraProcess(ObjCrane *cra,ObjCamera *out);
void f_w_yard_80239490_CraneConeDisplay(ObjCrane *cra,int param_2,uint **param_3,uint *param_4,undefined4 param_5,int param_6,SVECTOR *pt_unk,int param_8);
void f_w_yard_80239aa4_CraneMarkerDisplay(ObjCrane *cra,int param_2,uint **param_3,uint *param_4,MATRIX *mtx,short maybe_width,SVECTOR *sv,int param_8);
void f_w_yard_80239dcc_CraneDisplay(ObjCrane *cra,void *param_2,uint **param_3,uint *param_4,MATRIX *param_5);
int f_w_yard_80239fa0_DeathPointInstanceConstructor(ObjDeathPoint *dp,RegDir *rg);
int f_w_yard_8023a03c_InteractCarWithDeathPoint(ObjCar *car,ObjDeathPoint *dp);
void f_w_yard_8023a098_DeathPointProcess(ObjDeathPoint *dp);
void f_w_yard_8023a0b8_DeathPointDestructor(ObjDeathPoint *dp);
void f_w_yard_8023a0d8_RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);
void f_c_toy_80240000_OSRegisterCarWeapon(void);
void f_c_toy_80240298_CarToyClassConstructor(RegDir *rg);
int f_c_toy_8024030c_CarToyProcess(ObjCar *car,CarToy *toy);
MATRIX * f_c_toy_8024037c_CarToyDisplaySpecialGroupDisplay(undefined4 param_1,int grp_id,int unk,MATRIX *mtx,CarToy *toytoy);
void f_c_toy_80240428_SetLightMatrix(MATRIX *m);
MATRIX * f_c_toy_80240458_MulMatrix0(MATRIX *m0,MATRIX *m1,MATRIX *m2);
void f_c_crush_80241000_OSRegisterCarWeapon(void);
void f_c_crush_80241298_TreadPolysClassConstructor(RegDir *rgrg);
void f_c_crush_8024155c_TreadPolysClassDestructor(void);
int f_c_crush_802415a4_TreadPolysConstructor(ObjCar *car);
void f_c_crush_802416b8_TreadPolysDestructor(ObjCar *car);
void f_c_crush_802416f4_tread_proc_util(int param_1,int param_2,int *param_3,int param_4,int param_5);
void f_c_crush_802418c0_TreadPolysProcess(int param_1);
void f_c_crush_80241924_CarCrusherClassConstructor(RegDir *rg);
void f_c_crush_80241b14_CarCrusherClassDestructor(void);
int f_c_crush_80241b34_CarCrusherConstructor(ObjCar *car,undefined4 param_2);
void f_c_crush_80241b54_CarCrusherDestructor(ObjCar *car);
int f_c_crush_80241b74_CarCrusherProcess(ObjCar *car,CarCrusher *cru);
int f_c_crush_80241f58_CarCrusherWeaponSpecialConstructor(ObjCar *car,CarCrusher *cru);
int f_c_crush_80241fd8_InteractCarCrusherWithCar(ObjCar *cru,CarCrusher *cc,ObjCar *other);
MATRIX * f_c_crush_80242178_CarCrusherDisplaySpecialGroupDisplay(undefined4 param_1,int grp_id,int unk,MATRIX *mtx,CarCrusher *cru);
void f_c_crush_80242238_SetLightMatrix(MATRIX *m);
MATRIX * f_c_crush_80242268_MulMatrix0(MATRIX *m0,MATRIX *m1,MATRIX *m2);
void f_80250000_OSRegisterSoundEmitter(void);
int f_car_802500b0_cb_recurse(char *na,RegDir *rg);
void f_car_802501cc_util(undefined4 param_1);
void f_car_802501f8_CarCharacterClassConstructor(void);
void f_car_8025021c_CarCharacterClassDestructor(void);
void f_car_802508b8_CarFreezeCar(ObjCar *car);
void f_car_80250908_proc_help2(ObjCar *car);
void f_car_80250954_CarProcess(ObjCar *car);
void f_car_802511ac_destr_u(ObjCar *car);
void f_car_802511ec_CarDestructor(ObjCar *car);
void f_car_80252cec_CarAiDestructor(ObjCar *car);
int f_car_80252d50_ai_related6(ObjCar *car,ushort param_2);
void f_car_80253114_ai_related(ObjCar *car);
void f_car_802532c8_CarAiProcess(ObjCar *car);
void f_car_80253570_ai_help2(ObjCar *car);
void f_car_802535d8_unkz(ObjCar *car,ObjCar *oth,int amo);
void FUN_80253808(ObjCar *param_1);
char * FUN_80253970(void);
void f_car_80253a48_ai_help4(ObjCar *car,ObjCar *car2,int param_3);
int f_car_80253fb8_unk3(ObjCar *car);
int f_car_80253ff4_unk1(ObjCar *car);
undefined4 FUN_80254108(ObjCar *param_1);
undefined4 FUN_80254198(ObjCar *param_1);
undefined4 FUN_80254218(ObjCar *param_1);
undefined4 FUN_80254268(ObjCar *param_1);
undefined4 FUN_802550c8(int param_1,short param_2);
undefined4 FUN_8025524c(int param_1,short param_2);
undefined4 FUN_802553cc(int param_1);
void FUN_80255550(int param_1);
void FUN_80255990(int param_1,short param_2);
void FUN_80255b04(int param_1);
void FUN_80255bcc(int param_1);
void FUN_80255bd8(int param_1);
undefined4 FUN_80255be4(int param_1);
code * f_car_8025643c_cbs(ObjCar *car);
code * f_car_802565d8_ai_stuff9(ObjCar *car);
code * f_car_802566d8_ai_maybe(ObjCar *car);
code * f_car_80256d04_func_ptrs_stuff(ObjCar *car);
int f_car_80257740_ai_stuff12(ObjCar *car);
void f_car_80257998_he5(char *nam,char *str2);
void f_car_80257a48_CarWeaponClassConstructor(RegDir *rg);
void FUN_80257c84(void);
CarWpnEntry * f_car_80257cb4_wpn_help5(ObjCar *car,int *ret);
int f_car_80257d48_CarWeaponConstructor(ObjCar *car,int param_2);
void f_car_802582e4_CarWeaponDestructor(ObjCar *car);
void f_car_8025839c_CarWeaponProcess(ObjCar *car);
int f_car_80258930_CarLaunchMIRV(ObjCar *car);
bool FUN_80258958(ObjCar *param_1,undefined4 param_2,CarWpnEntry *param_3,undefined4 param_4);
bool FUN_80258980(ObjCar *param_1,undefined4 param_2,CarWpnEntry *param_3,undefined4 param_4);
bool FUN_802589a8(ObjCar *param_1,undefined4 param_2,CarWpnEntry *param_3,undefined4 param_4);
bool FUN_802589d0(ObjCar *param_1,undefined4 param_2,CarWpnEntry *param_3,undefined4 param_4);
int f_car_802589f8_CarLaunchProximity(ObjCar *car,undefined4 param_2,CarWpnEntry *ee);
int f_car_80258b34_CarLaunchRicochet(ObjCar *param_1,undefined4 param_2,CarWpnEntry *param_3,undefined4 param_4);
int f_car_80258bc4_CarLaunchSpecial(ObjCar *car,undefined4 param_2,CarWpnEntry *param_3,undefined4 param_4);
int f_car_80258c30_CarLaunchTorchers(ObjCar *car,undefined4 param_2,CarWpnEntry *wpn,undefined4 param_4);
ObjWeaponProjectile *f_car_802599ec_CarLaunchProjectile(char *name,ObjCar *car,CarWpnEntry *wpn,undefined4 param_4);
void f_car_80259c10_wpn_rel_procs(ObjCar *car,int val);
void f_car_80259cf4_wpn_help2(ObjCar *car,short ind);
void f_car_80259d60_cooldown(CarWpnEntry *ee);
void f_car_80259d7c_null(void);
int f_car_80259d84_unks(ObjCar *car,MATRIX *param_2,int param_3);
int FUN_80259e24(int param_1,int param_2);
void f_car_8025a094_vecs(MATRIX *mmm,SVECTOR *sss);
undefined4 f_car_8025a13c_un1(ObjCar *car,CarWpnEntry *wpn,int param_3,MATRIX *mtx,SVECTOR *sv);
void f_car_8025a374_proj_setups(CarWpnEntry *wp,ObjCar *car,ObjWeaponProjectile *proj);
void f_car_8025a3ec_wpn_destr_sht(CarWpnEntry *www);
void FUN_8025a55c(void);
int f_car_8025a59c_AddInventoryToCar(ObjCar *car,char *name,short amount);
void f_car_8025a680_CarLaunchSpecialSound(ObjCar *car);
SVECTOR * f_car_8025a7a8_CarLocalPosToWorldPos(ObjCar *car,SVECTOR *lp,SVECTOR *re);
void f_car_8025a7d4_transformz(ObjCar *car,SVECTOR *sv,SVECTOR *rrr);
void f_car_8025b190_CarPhysicsDestructor(ObjCar *car);
void f_car_8025bb44_car_colz(CarStuff7C *qqq,ObjCar *car);
bool f_car_8025bd58_CollideWorldWithCarAtoms(ObjCar *car);
int f_car_8025be18_CarPhysicsProcess(ObjCar *car);
int f_car_8025c154_wheels_checks(ObjCar *car);
int f_car_8025c198_jump_checks(ObjCar *car);
void FUN_8025c25c(int param_1);
void f_car_8025ca48_phy_help3(ObjCar *car);
void FUN_8025d284(int param_1,undefined4 param_2,int param_3,int param_4,int param_5);
int FUN_8025d484(int param_1,int param_2,int param_3);
void FUN_8025d4e8(int param_1,undefined4 param_2,int param_3,undefined4 param_4);
void FUN_8025d50c(int param_1,undefined4 param_2,int param_3,int param_4,undefined4 param_5,int param_6);
void FUN_8025d588(int param_1,int param_2,int param_3,SVECTOR *param_4,int param_5);
void f_car_8025dfb8_wheel_procs(CarStuff7C *wh);
void f_car_8025e094_phy_help11(ObjCar *car);
int f_car_8025e924_InteractCarWithCar(ObjCar *car1,ObjCar *car2);
void f_car_8025f14c_car_death(ObjCar *car,SVECTOR *sv);
int f_car_8025f4a4_vibro_related(int u1,int u2);
int f_car_8025f510_CarApplyDamage(ObjCar *car,int a1,int amount,SVECTOR *vc,char *msg);
void f_car_8025f6a0_TransformOriginalBox(ObjCar *car);
undefined4 FUN_8025f860(ObjCar *param_1);
bool f_car_8025fa64_phy_help1(ObjCar *car);
void f_car_8025fad8_CarOrientWithMatrix(ObjCar *car,MATRIX *mtx);
int f_car_8026132c_InteractCarWithLightEmitter(ObjCar *car,ObjLightEmitter *em);
void FUN_802614b4(int param_1);
int f_car_802617e4_CarJumpConstructor(ObjCar **param_1,ObjCar **param_2);
void f_car_80261cfc_CarDisplayJumpConstructor(ObjCar *car);
void FUN_80261d5c(ObjCar *param_1);
void f_car_802632e4_car_set_unkz(ObjCar *car,int val);
void f_car_802632ec_car_health_sh(ObjCar *car);
void f_car_802639b0_CarDisplayDestructor(ObjCar *car);
void f_car_802643f8_CarRelocateBitStuff(RegDir *rg,uint param_2,uint param_3,uint param_4,ushort param_5);
void f_car_802646fc_vis_help1(ObjCar *car,int iii);
int f_car_80264738_help9(ObjCar *car,int vvv);
void f_car_8026487c_free_disp_sht(ObjCar *car);
undefined4 FUN_802648c4(int param_1);
void f_car_802649a4_vis9(ObjCar *car);
int f_car_80264a2c_inv_ct(int *param_1,int *param_2);
void f_car_80264a40_cb_invis2(byte *qq);
int f_car_80264bd0_CarDisplayInvisibilityConstructor(ObjCar *car);
void f_car_80264cb8_CarDisplayInvisibilityDestructor(ObjCar *car);
int f_car_80264d10_CarDisplayShieldConstructor(ObjCar *car);
void f_car_80264d64_CarDisplayShieldDestructor(ObjCar *car);
int f_car_80264da0_CarDisplayFreezeConstructor(ObjCar *car);
void f_80264de0_CarDisplayFreezeDestructor(ObjCar *car);
void FUN_80264e10(void);
void f_car_80264e9c_cam_he1(undefined2 *param_1,undefined2 *param_2,undefined2 *param_3,SVECTOR *sv4);
void f_car_80264f08_CarCameraProcess(ObjCar *car,int param_2,uint *param_3);
void * f_car_802668e0_ai_stuff2(byte *unk_struct_car);
undefined4 FUN_80266970(int param_1,int *param_2);
int FUN_80266b5c(int param_1,int param_2,undefined4 param_3,int param_4);
void FUN_80266d58(undefined4 param_1,undefined4 param_2,undefined4 *param_3,short *param_4,undefined4 param_5);
char * FUN_80266e10(byte *param_1,byte *param_2,int *param_3);
uint FUN_802671e4(int param_1,uint param_2,short param_3);
uint FUN_80267978(int param_1,uint param_2,short param_3);
undefined4 FUN_80267f88(void);
byte FUN_80267fe0(int param_1,undefined2 *param_2,uint param_3);
SVECTOR * ApplyMatrixSV(MATRIX *m,SVECTOR *v0,SVECTOR *v1);
void RotTrans(SVECTOR *v0,VECTOR *v1,long *flag);
u_short f_car_802688d0_GetClut(int x,int y);
void f_interact_80270000_OSRegisterCarWeapon(void);
void f_interact_80270060_OSRegisterAi(void);
void f_interact_8027018c_OSRegisterCarPhysics(void);
void f_interact_80270348_OSRegisterExplosion(void);
int f_interact_802703a8_InteractBoxObjectWithBulletProjectile(void *obj_juice,DaBox *bx,MATRIX *mtx,BulletProjectile *proj,void *owner_juice);
int f_interact_80270530_InteractBoxObjectWithBullet(void *obj,DaBox *box,MATRIX *mtx,ObjBullet *bu);
int f_interact_80270550_InteractBoxObjectWithWeaponProjectile(void *obj,DaBox *bx,MATRIX *bx_mtx,ObjWeaponProjectile *proj);
int f_interact_80270614_InteractCarWithBullet(ObjCar *car,ObjBullet *bu);
void f_interact_802706f4_cb(DispFaceHead *face,SVECTOR *vec);
void f_interact_802708ac_WorldObjectSpawnDisplayFaceFragments(WorldObjInfo *wo,undefined4 param_2,undefined2 *param_3,SVECTOR *param_4);
void f_interact_80270974_WorldObjectExplode(WorldObjInfo *wo);
int f_interact_8027099c_BoxObjectApplyDamage(void *obj_juice,int *ptr_hp,int amount,SVECTOR *at,MATRIX *m1,MATRIX *m2,WorldObjInfo *wo,char *exp_name,char *ai_obj_state_stuff,int dunno);
int f_interact_80270b00_InteractBulletWithDestroyable(ObjBullet *bu,ObjDestroyable *de);
int f_interact_80270d10_ExplosionShockwaveGetObjectForceDamage(int param_1,void *param_2,VECTOR *vc);
int f_interact_8027103c_InteractBoxObjectWithWeaponBomb(void *obj,DaBox *bx,MATRIX *bx_mtx,ObjWeaponBomb *bomb);
int f_interact_802710b0_InteractCarWithWeaponBomb(ObjCar *car,ObjWeaponBomb *bomb);
int f_interact_802711bc_InteractCarWithPowerup(ObjCar *car,ObjPowerup *pw);
int f_interact_80271460_InteractCarWithTeleporter(ObjCar *car,ObjTeleporter *tele);

